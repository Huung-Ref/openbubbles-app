// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.33.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding
)]

// Section: imports

use crate::api::api::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::transform_result_dco;
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = SseCodec,
    default_rust_opaque = RustOpaqueMoi,
    default_rust_auto_opaque = RustAutoOpaqueMoi,
);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.0.0-dev.33";
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = 2081148752;

// Section: executor

pub use crate::api::api::FLUTTER_RUST_BRIDGE_HANDLER;

// Section: wire_funcs

fn wire_config_from_encoded_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "config_from_encoded",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_encoded = <Vec<u8>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || crate::api::api::config_from_encoded(api_encoded))())
            }
        },
    )
}
fn wire_config_from_validation_data_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "config_from_validation_data",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_data = <Vec<u8>>::sse_decode(&mut deserializer);
            let api_extra = <crate::api::api::DartHwExtra>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::api::config_from_validation_data(api_data, api_extra)
                })())
            }
        },
    )
}
fn wire_configure_app_review_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "configure_app_review", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc < PushState >>>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                        let mut api_state_decoded = None;
let decode_indices_ = flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(vec![api_state.rust_auto_opaque_lock_order_info(0, false)]);
        for i in decode_indices_ {
            match i {
                0 => api_state_decoded = Some(api_state.rust_auto_opaque_decode_async_ref().await),
                _ => unreachable!(),
            }
        }
        let api_state = api_state_decoded.unwrap();
 crate::api::api::configure_app_review(&api_state).await
                    })().await)
                } })
}
fn wire_configure_macos_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "configure_macos", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc < PushState >>>>::sse_decode(&mut deserializer);
let api_config = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MacOSConfig>>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                        let mut api_state_decoded = None;
let mut api_config_decoded = None;
let decode_indices_ = flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(vec![api_state.rust_auto_opaque_lock_order_info(0, false), api_config.rust_auto_opaque_lock_order_info(1, false)]);
        for i in decode_indices_ {
            match i {
                0 => api_state_decoded = Some(api_state.rust_auto_opaque_decode_async_ref().await),
1 => api_config_decoded = Some(api_config.rust_auto_opaque_decode_async_ref().await),
                _ => unreachable!(),
            }
        }
        let api_state = api_state_decoded.unwrap();
let api_config = api_config_decoded.unwrap();
 crate::api::api::configure_macos(&api_state, &api_config).await
                    })().await)
                } })
}
fn wire_convert_token_to_uuid_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "convert_token_to_uuid", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc < PushState >>>>::sse_decode(&mut deserializer);
let api_handle = <String>::sse_decode(&mut deserializer);
let api_token = <Vec<u8>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                        let mut api_state_decoded = None;
let decode_indices_ = flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(vec![api_state.rust_auto_opaque_lock_order_info(0, false)]);
        for i in decode_indices_ {
            match i {
                0 => api_state_decoded = Some(api_state.rust_auto_opaque_decode_async_ref().await),
                _ => unreachable!(),
            }
        }
        let api_state = api_state_decoded.unwrap();
 crate::api::api::convert_token_to_uuid(&api_state, api_handle, api_token).await
                    })().await)
                } })
}
fn wire_dart_attachment_get_size_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "dart_attachment_get_size",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::api::api::DartAttachment>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(crate::api::api::DartAttachment::get_size(&api_that))
                })())
            }
        },
    )
}
fn wire_dart_attachment_restore_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "dart_attachment_restore",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_saved = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(crate::api::api::DartAttachment::restore(api_saved))
                })())
            }
        },
    )
}
fn wire_dart_attachment_save_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "dart_attachment_save",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::api::api::DartAttachment>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(crate::api::api::DartAttachment::save(&api_that))
                })())
            }
        },
    )
}
fn wire_dart_message_parts_as_plain_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "dart_message_parts_as_plain",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::api::api::DartMessageParts>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(crate::api::api::DartMessageParts::as_plain(&api_that))
                })())
            }
        },
    )
}
fn wire_do_reregister_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "do_reregister", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc < PushState >>>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                        let mut api_state_decoded = None;
let decode_indices_ = flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(vec![api_state.rust_auto_opaque_lock_order_info(0, false)]);
        for i in decode_indices_ {
            match i {
                0 => api_state_decoded = Some(api_state.rust_auto_opaque_decode_async_ref().await),
                _ => unreachable!(),
            }
        }
        let api_state = api_state_decoded.unwrap();
 crate::api::api::do_reregister(&api_state).await
                    })().await)
                } })
}
fn wire_download_attachment_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "download_attachment", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_sink = <StreamSink<crate::api::api::TransferProgress,flutter_rust_bridge::for_generated::SseCodec>>::sse_decode(&mut deserializer);
let api_state = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc < PushState >>>>::sse_decode(&mut deserializer);
let api_attachment = <crate::api::api::DartAttachment>::sse_decode(&mut deserializer);
let api_path = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                        let mut api_state_decoded = None;
let decode_indices_ = flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(vec![api_state.rust_auto_opaque_lock_order_info(0, false)]);
        for i in decode_indices_ {
            match i {
                0 => api_state_decoded = Some(api_state.rust_auto_opaque_decode_async_ref().await),
                _ => unreachable!(),
            }
        }
        let api_state = api_state_decoded.unwrap();
 crate::api::api::download_attachment(api_sink, &api_state, api_attachment, api_path).await
                    })().await)
                } })
}
fn wire_download_mmcs_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "download_mmcs", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_sink = <StreamSink<crate::api::api::TransferProgress,flutter_rust_bridge::for_generated::SseCodec>>::sse_decode(&mut deserializer);
let api_state = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc < PushState >>>>::sse_decode(&mut deserializer);
let api_attachment = <crate::api::api::DartMMCSFile>::sse_decode(&mut deserializer);
let api_path = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                        let mut api_state_decoded = None;
let decode_indices_ = flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(vec![api_state.rust_auto_opaque_lock_order_info(0, false)]);
        for i in decode_indices_ {
            match i {
                0 => api_state_decoded = Some(api_state.rust_auto_opaque_decode_async_ref().await),
                _ => unreachable!(),
            }
        }
        let api_state = api_state_decoded.unwrap();
 crate::api::api::download_mmcs(api_sink, &api_state, api_attachment, api_path).await
                    })().await)
                } })
}
fn wire_get_2fa_sms_opts_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "get_2fa_sms_opts", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc < PushState >>>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                        let mut api_state_decoded = None;
let decode_indices_ = flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(vec![api_state.rust_auto_opaque_lock_order_info(0, false)]);
        for i in decode_indices_ {
            match i {
                0 => api_state_decoded = Some(api_state.rust_auto_opaque_decode_async_ref().await),
                _ => unreachable!(),
            }
        }
        let api_state = api_state_decoded.unwrap();
 crate::api::api::get_2fa_sms_opts(&api_state).await
                    })().await)
                } })
}
fn wire_get_device_info_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_device_info",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_config = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MacOSConfig>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    let mut api_config_decoded = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(
                            vec![api_config.rust_auto_opaque_lock_order_info(0, false)],
                        );
                    for i in decode_indices_ {
                        match i {
                            0 => {
                                api_config_decoded =
                                    Some(api_config.rust_auto_opaque_decode_sync_ref())
                            }
                            _ => unreachable!(),
                        }
                    }
                    let api_config = api_config_decoded.unwrap();
                    crate::api::api::get_device_info(&api_config)
                })())
            }
        },
    )
}
fn wire_get_device_info_state_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "get_device_info_state", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc < PushState >>>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                        let mut api_state_decoded = None;
let decode_indices_ = flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(vec![api_state.rust_auto_opaque_lock_order_info(0, false)]);
        for i in decode_indices_ {
            match i {
                0 => api_state_decoded = Some(api_state.rust_auto_opaque_decode_async_ref().await),
                _ => unreachable!(),
            }
        }
        let api_state = api_state_decoded.unwrap();
 crate::api::api::get_device_info_state(&api_state).await
                    })().await)
                } })
}
fn wire_get_handles_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "get_handles", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc < PushState >>>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                        let mut api_state_decoded = None;
let decode_indices_ = flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(vec![api_state.rust_auto_opaque_lock_order_info(0, false)]);
        for i in decode_indices_ {
            match i {
                0 => api_state_decoded = Some(api_state.rust_auto_opaque_decode_async_ref().await),
                _ => unreachable!(),
            }
        }
        let api_state = api_state_decoded.unwrap();
 crate::api::api::get_handles(&api_state).await
                    })().await)
                } })
}
fn wire_get_phase_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "get_phase", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc < PushState >>>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                        let mut api_state_decoded = None;
let decode_indices_ = flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(vec![api_state.rust_auto_opaque_lock_order_info(0, false)]);
        for i in decode_indices_ {
            match i {
                0 => api_state_decoded = Some(api_state.rust_auto_opaque_decode_async_ref().await),
                _ => unreachable!(),
            }
        }
        let api_state = api_state_decoded.unwrap();
 Result::<_,()>::Ok(crate::api::api::get_phase(&api_state).await)
                    })().await)
                } })
}
fn wire_get_regstate_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "get_regstate", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc < PushState >>>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                        let mut api_state_decoded = None;
let decode_indices_ = flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(vec![api_state.rust_auto_opaque_lock_order_info(0, false)]);
        for i in decode_indices_ {
            match i {
                0 => api_state_decoded = Some(api_state.rust_auto_opaque_decode_async_ref().await),
                _ => unreachable!(),
            }
        }
        let api_state = api_state_decoded.unwrap();
 crate::api::api::get_regstate(&api_state).await
                    })().await)
                } })
}
fn wire_get_sms_targets_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "get_sms_targets", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc < PushState >>>>::sse_decode(&mut deserializer);
let api_handle = <String>::sse_decode(&mut deserializer);
let api_refresh = <bool>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                        let mut api_state_decoded = None;
let decode_indices_ = flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(vec![api_state.rust_auto_opaque_lock_order_info(0, false)]);
        for i in decode_indices_ {
            match i {
                0 => api_state_decoded = Some(api_state.rust_auto_opaque_decode_async_ref().await),
                _ => unreachable!(),
            }
        }
        let api_state = api_state_decoded.unwrap();
 crate::api::api::get_sms_targets(&api_state, api_handle, api_refresh).await
                    })().await)
                } })
}
fn wire_get_user_name_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "get_user_name", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc < PushState >>>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                        let mut api_state_decoded = None;
let decode_indices_ = flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(vec![api_state.rust_auto_opaque_lock_order_info(0, false)]);
        for i in decode_indices_ {
            match i {
                0 => api_state_decoded = Some(api_state.rust_auto_opaque_decode_async_ref().await),
                _ => unreachable!(),
            }
        }
        let api_state = api_state_decoded.unwrap();
 crate::api::api::get_user_name(&api_state).await
                    })().await)
                } })
}
fn wire_invalidate_id_cache_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "invalidate_id_cache", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc < PushState >>>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                        let mut api_state_decoded = None;
let decode_indices_ = flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(vec![api_state.rust_auto_opaque_lock_order_info(0, false)]);
        for i in decode_indices_ {
            match i {
                0 => api_state_decoded = Some(api_state.rust_auto_opaque_decode_async_ref().await),
                _ => unreachable!(),
            }
        }
        let api_state = api_state_decoded.unwrap();
 crate::api::api::invalidate_id_cache(&api_state).await
                    })().await)
                } })
}
fn wire_new_msg_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "new_msg", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc < PushState >>>>::sse_decode(&mut deserializer);
let api_conversation = <crate::api::api::DartConversationData>::sse_decode(&mut deserializer);
let api_sender = <String>::sse_decode(&mut deserializer);
let api_message = <crate::api::api::DartMessage>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                        let mut api_state_decoded = None;
let decode_indices_ = flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(vec![api_state.rust_auto_opaque_lock_order_info(0, false)]);
        for i in decode_indices_ {
            match i {
                0 => api_state_decoded = Some(api_state.rust_auto_opaque_decode_async_ref().await),
                _ => unreachable!(),
            }
        }
        let api_state = api_state_decoded.unwrap();
 Result::<_,()>::Ok(crate::api::api::new_msg(&api_state, api_conversation, api_sender, api_message).await)
                    })().await)
                } })
}
fn wire_new_push_state_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "new_push_state",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_dir = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse(
                    (move || async move { crate::api::api::new_push_state(api_dir).await })().await,
                )
            }
        },
    )
}
fn wire_ptr_to_dart_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ptr_to_dart",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_ptr = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(crate::api::api::ptr_to_dart(api_ptr))
                })())
            }
        },
    )
}
fn wire_recv_wait_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "recv_wait", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc < PushState >>>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                        let mut api_state_decoded = None;
let decode_indices_ = flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(vec![api_state.rust_auto_opaque_lock_order_info(0, false)]);
        for i in decode_indices_ {
            match i {
                0 => api_state_decoded = Some(api_state.rust_auto_opaque_decode_async_ref().await),
                _ => unreachable!(),
            }
        }
        let api_state = api_state_decoded.unwrap();
 Result::<_,()>::Ok(crate::api::api::recv_wait(&api_state).await)
                    })().await)
                } })
}
fn wire_register_ids_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "register_ids", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc < PushState >>>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                        let mut api_state_decoded = None;
let decode_indices_ = flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(vec![api_state.rust_auto_opaque_lock_order_info(0, false)]);
        for i in decode_indices_ {
            match i {
                0 => api_state_decoded = Some(api_state.rust_auto_opaque_decode_async_ref().await),
                _ => unreachable!(),
            }
        }
        let api_state = api_state_decoded.unwrap();
 crate::api::api::register_ids(&api_state).await
                    })().await)
                } })
}
fn wire_reset_state_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "reset_state", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc < PushState >>>>::sse_decode(&mut deserializer);
let api_reset_hw = <bool>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                        let mut api_state_decoded = None;
let decode_indices_ = flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(vec![api_state.rust_auto_opaque_lock_order_info(0, false)]);
        for i in decode_indices_ {
            match i {
                0 => api_state_decoded = Some(api_state.rust_auto_opaque_decode_async_ref().await),
                _ => unreachable!(),
            }
        }
        let api_state = api_state_decoded.unwrap();
 crate::api::api::reset_state(&api_state, api_reset_hw).await
                    })().await)
                } })
}
fn wire_send_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "send", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc < PushState >>>>::sse_decode(&mut deserializer);
let api_msg = <crate::api::api::DartIMessage>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                        let mut api_state_decoded = None;
let decode_indices_ = flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(vec![api_state.rust_auto_opaque_lock_order_info(0, false)]);
        for i in decode_indices_ {
            match i {
                0 => api_state_decoded = Some(api_state.rust_auto_opaque_decode_async_ref().await),
                _ => unreachable!(),
            }
        }
        let api_state = api_state_decoded.unwrap();
 crate::api::api::send(&api_state, api_msg).await
                    })().await)
                } })
}
fn wire_send_2fa_sms_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "send_2fa_sms", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc < PushState >>>>::sse_decode(&mut deserializer);
let api_phone_id = <u32>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                        let mut api_state_decoded = None;
let decode_indices_ = flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(vec![api_state.rust_auto_opaque_lock_order_info(0, false)]);
        for i in decode_indices_ {
            match i {
                0 => api_state_decoded = Some(api_state.rust_auto_opaque_decode_async_ref().await),
                _ => unreachable!(),
            }
        }
        let api_state = api_state_decoded.unwrap();
 crate::api::api::send_2fa_sms(&api_state, api_phone_id).await
                    })().await)
                } })
}
fn wire_send_2fa_to_devices_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "send_2fa_to_devices", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc < PushState >>>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                        let mut api_state_decoded = None;
let decode_indices_ = flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(vec![api_state.rust_auto_opaque_lock_order_info(0, false)]);
        for i in decode_indices_ {
            match i {
                0 => api_state_decoded = Some(api_state.rust_auto_opaque_decode_async_ref().await),
                _ => unreachable!(),
            }
        }
        let api_state = api_state_decoded.unwrap();
 crate::api::api::send_2fa_to_devices(&api_state).await
                    })().await)
                } })
}
fn wire_service_from_ptr_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "service_from_ptr",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_ptr = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(crate::api::api::service_from_ptr(api_ptr))
                })())
            }
        },
    )
}
fn wire_try_auth_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "try_auth", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc < PushState >>>>::sse_decode(&mut deserializer);
let api_username = <String>::sse_decode(&mut deserializer);
let api_password = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                        let mut api_state_decoded = None;
let decode_indices_ = flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(vec![api_state.rust_auto_opaque_lock_order_info(0, false)]);
        for i in decode_indices_ {
            match i {
                0 => api_state_decoded = Some(api_state.rust_auto_opaque_decode_async_ref().await),
                _ => unreachable!(),
            }
        }
        let api_state = api_state_decoded.unwrap();
 crate::api::api::try_auth(&api_state, api_username, api_password).await
                    })().await)
                } })
}
fn wire_upload_attachment_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "upload_attachment", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_sink = <StreamSink<crate::api::api::TransferProgress,flutter_rust_bridge::for_generated::SseCodec>>::sse_decode(&mut deserializer);
let api_state = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc < PushState >>>>::sse_decode(&mut deserializer);
let api_path = <String>::sse_decode(&mut deserializer);
let api_mime = <String>::sse_decode(&mut deserializer);
let api_uti = <String>::sse_decode(&mut deserializer);
let api_name = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                        let mut api_state_decoded = None;
let decode_indices_ = flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(vec![api_state.rust_auto_opaque_lock_order_info(0, false)]);
        for i in decode_indices_ {
            match i {
                0 => api_state_decoded = Some(api_state.rust_auto_opaque_decode_async_ref().await),
                _ => unreachable!(),
            }
        }
        let api_state = api_state_decoded.unwrap();
 crate::api::api::upload_attachment(api_sink, &api_state, api_path, api_mime, api_uti, api_name).await
                    })().await)
                } })
}
fn wire_upload_mmcs_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "upload_mmcs", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_sink = <StreamSink<crate::api::api::MMCSTransferProgress,flutter_rust_bridge::for_generated::SseCodec>>::sse_decode(&mut deserializer);
let api_state = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc < PushState >>>>::sse_decode(&mut deserializer);
let api_path = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                        let mut api_state_decoded = None;
let decode_indices_ = flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(vec![api_state.rust_auto_opaque_lock_order_info(0, false)]);
        for i in decode_indices_ {
            match i {
                0 => api_state_decoded = Some(api_state.rust_auto_opaque_decode_async_ref().await),
                _ => unreachable!(),
            }
        }
        let api_state = api_state_decoded.unwrap();
 crate::api::api::upload_mmcs(api_sink, &api_state, api_path).await
                    })().await)
                } })
}
fn wire_validate_targets_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "validate_targets", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc < PushState >>>>::sse_decode(&mut deserializer);
let api_targets = <Vec<String>>::sse_decode(&mut deserializer);
let api_sender = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                        let mut api_state_decoded = None;
let decode_indices_ = flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(vec![api_state.rust_auto_opaque_lock_order_info(0, false)]);
        for i in decode_indices_ {
            match i {
                0 => api_state_decoded = Some(api_state.rust_auto_opaque_decode_async_ref().await),
                _ => unreachable!(),
            }
        }
        let api_state = api_state_decoded.unwrap();
 crate::api::api::validate_targets(&api_state, api_targets, api_sender).await
                    })().await)
                } })
}
fn wire_verify_2fa_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "verify_2fa", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc < PushState >>>>::sse_decode(&mut deserializer);
let api_code = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                        let mut api_state_decoded = None;
let decode_indices_ = flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(vec![api_state.rust_auto_opaque_lock_order_info(0, false)]);
        for i in decode_indices_ {
            match i {
                0 => api_state_decoded = Some(api_state.rust_auto_opaque_decode_async_ref().await),
                _ => unreachable!(),
            }
        }
        let api_state = api_state_decoded.unwrap();
 crate::api::api::verify_2fa(&api_state, api_code).await
                    })().await)
                } })
}
fn wire_verify_2fa_sms_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "verify_2fa_sms", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_state = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc < PushState >>>>::sse_decode(&mut deserializer);
let api_body = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VerifyBody>>>::sse_decode(&mut deserializer);
let api_code = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                        let mut api_state_decoded = None;
let mut api_body_decoded = None;
let decode_indices_ = flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(vec![api_state.rust_auto_opaque_lock_order_info(0, false), api_body.rust_auto_opaque_lock_order_info(1, false)]);
        for i in decode_indices_ {
            match i {
                0 => api_state_decoded = Some(api_state.rust_auto_opaque_decode_async_ref().await),
1 => api_body_decoded = Some(api_body.rust_auto_opaque_decode_async_ref().await),
                _ => unreachable!(),
            }
        }
        let api_state = api_state_decoded.unwrap();
let api_body = api_body_decoded.unwrap();
 crate::api::api::verify_2fa_sms(&api_state, &api_body, api_code).await
                    })().await)
                } })
}

// Section: related_funcs

flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MacOSConfig>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Value>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VerifyBody>
);

// Section: dart2rust

impl SseDecode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        unreachable!("");
    }
}

impl SseDecode for Arc<PushState> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for MacOSConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MacOSConfig>,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for Value {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Value>,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for VerifyBody {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VerifyBody>,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MacOSConfig>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Value>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VerifyBody>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for StreamSink<
        crate::api::api::MMCSTransferProgress,
        flutter_rust_bridge::for_generated::SseCodec,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return StreamSink::deserialize(inner);
    }
}

impl SseDecode
    for StreamSink<crate::api::api::TransferProgress, flutter_rust_bridge::for_generated::SseCodec>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return StreamSink::deserialize(inner);
    }
}

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for crate::api::api::DartAttachment {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_aType = <crate::api::api::DartAttachmentType>::sse_decode(deserializer);
        let mut var_partIdx = <u64>::sse_decode(deserializer);
        let mut var_utiType = <String>::sse_decode(deserializer);
        let mut var_mime = <String>::sse_decode(deserializer);
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_iris = <bool>::sse_decode(deserializer);
        return crate::api::api::DartAttachment {
            a_type: var_aType,
            part_idx: var_partIdx,
            uti_type: var_utiType,
            mime: var_mime,
            name: var_name,
            iris: var_iris,
        };
    }
}

impl SseDecode for crate::api::api::DartAttachmentType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <Vec<u8>>::sse_decode(deserializer);
                return crate::api::api::DartAttachmentType::Inline(var_field0);
            }
            1 => {
                let mut var_field0 = <crate::api::api::DartMMCSFile>::sse_decode(deserializer);
                return crate::api::api::DartAttachmentType::MMCS(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::api::DartBalloonBody {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_bid = <String>::sse_decode(deserializer);
        let mut var_data = <Vec<u8>>::sse_decode(deserializer);
        return crate::api::api::DartBalloonBody {
            bid: var_bid,
            data: var_data,
        };
    }
}

impl SseDecode for crate::api::api::DartChangeParticipantMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_newParticipants = <Vec<String>>::sse_decode(deserializer);
        let mut var_groupVersion = <u64>::sse_decode(deserializer);
        return crate::api::api::DartChangeParticipantMessage {
            new_participants: var_newParticipants,
            group_version: var_groupVersion,
        };
    }
}

impl SseDecode for crate::api::api::DartConversationData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_participants = <Vec<String>>::sse_decode(deserializer);
        let mut var_cvName = <Option<String>>::sse_decode(deserializer);
        let mut var_senderGuid = <Option<String>>::sse_decode(deserializer);
        return crate::api::api::DartConversationData {
            participants: var_participants,
            cv_name: var_cvName,
            sender_guid: var_senderGuid,
        };
    }
}

impl SseDecode for crate::api::api::DartDeviceInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_serial = <String>::sse_decode(deserializer);
        let mut var_osVersion = <String>::sse_decode(deserializer);
        let mut var_encodedData = <Vec<u8>>::sse_decode(deserializer);
        return crate::api::api::DartDeviceInfo {
            name: var_name,
            serial: var_serial,
            os_version: var_osVersion,
            encoded_data: var_encodedData,
        };
    }
}

impl SseDecode for crate::api::api::DartEditMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_tuuid = <String>::sse_decode(deserializer);
        let mut var_editPart = <u64>::sse_decode(deserializer);
        let mut var_newParts = <crate::api::api::DartMessageParts>::sse_decode(deserializer);
        return crate::api::api::DartEditMessage {
            tuuid: var_tuuid,
            edit_part: var_editPart,
            new_parts: var_newParts,
        };
    }
}

impl SseDecode for crate::api::api::DartHwExtra {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_version = <String>::sse_decode(deserializer);
        let mut var_protocolVersion = <u32>::sse_decode(deserializer);
        let mut var_deviceId = <String>::sse_decode(deserializer);
        let mut var_icloudUa = <String>::sse_decode(deserializer);
        let mut var_aoskitVersion = <String>::sse_decode(deserializer);
        return crate::api::api::DartHwExtra {
            version: var_version,
            protocol_version: var_protocolVersion,
            device_id: var_deviceId,
            icloud_ua: var_icloudUa,
            aoskit_version: var_aoskitVersion,
        };
    }
}

impl SseDecode for crate::api::api::DartIMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <String>::sse_decode(deserializer);
        let mut var_sender = <Option<String>>::sse_decode(deserializer);
        let mut var_afterGuid = <Option<String>>::sse_decode(deserializer);
        let mut var_conversation =
            <Option<crate::api::api::DartConversationData>>::sse_decode(deserializer);
        let mut var_message = <crate::api::api::DartMessage>::sse_decode(deserializer);
        let mut var_sentTimestamp = <u64>::sse_decode(deserializer);
        let mut var_target =
            <Option<Vec<crate::api::api::DartMessageTarget>>>::sse_decode(deserializer);
        let mut var_sendDelivered = <bool>::sse_decode(deserializer);
        return crate::api::api::DartIMessage {
            id: var_id,
            sender: var_sender,
            after_guid: var_afterGuid,
            conversation: var_conversation,
            message: var_message,
            sent_timestamp: var_sentTimestamp,
            target: var_target,
            send_delivered: var_sendDelivered,
        };
    }
}

impl SseDecode for crate::api::api::DartIconChangeMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_file = <Option<crate::api::api::DartMMCSFile>>::sse_decode(deserializer);
        let mut var_groupVersion = <u64>::sse_decode(deserializer);
        return crate::api::api::DartIconChangeMessage {
            file: var_file,
            group_version: var_groupVersion,
        };
    }
}

impl SseDecode for crate::api::api::DartIndexedMessagePart {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_part = <crate::api::api::DartMessagePart>::sse_decode(deserializer);
        let mut var_idx = <Option<usize>>::sse_decode(deserializer);
        let mut var_ext = <Option<crate::api::api::DartPartExtension>>::sse_decode(deserializer);
        return crate::api::api::DartIndexedMessagePart {
            part: var_part,
            idx: var_idx,
            ext: var_ext,
        };
    }
}

impl SseDecode for crate::api::api::DartLoginState {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::api::DartLoginState::LoggedIn;
            }
            1 => {
                return crate::api::api::DartLoginState::NeedsDevice2FA;
            }
            2 => {
                return crate::api::api::DartLoginState::Needs2FAVerification;
            }
            3 => {
                return crate::api::api::DartLoginState::NeedsSMS2FA;
            }
            4 => {
                let mut var_field0 = <VerifyBody>::sse_decode(deserializer);
                return crate::api::api::DartLoginState::NeedsSMS2FAVerification(var_field0);
            }
            5 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::api::DartLoginState::NeedsExtraStep(var_field0);
            }
            6 => {
                return crate::api::api::DartLoginState::NeedsLogin;
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::api::DartMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <crate::api::api::DartNormalMessage>::sse_decode(deserializer);
                return crate::api::api::DartMessage::Message(var_field0);
            }
            1 => {
                let mut var_field0 = <crate::api::api::DartRenameMessage>::sse_decode(deserializer);
                return crate::api::api::DartMessage::RenameMessage(var_field0);
            }
            2 => {
                let mut var_field0 =
                    <crate::api::api::DartChangeParticipantMessage>::sse_decode(deserializer);
                return crate::api::api::DartMessage::ChangeParticipants(var_field0);
            }
            3 => {
                let mut var_field0 = <crate::api::api::DartReactMessage>::sse_decode(deserializer);
                return crate::api::api::DartMessage::React(var_field0);
            }
            4 => {
                return crate::api::api::DartMessage::Delivered;
            }
            5 => {
                return crate::api::api::DartMessage::Read;
            }
            6 => {
                return crate::api::api::DartMessage::Typing;
            }
            7 => {
                let mut var_field0 = <crate::api::api::DartUnsendMessage>::sse_decode(deserializer);
                return crate::api::api::DartMessage::Unsend(var_field0);
            }
            8 => {
                let mut var_field0 = <crate::api::api::DartEditMessage>::sse_decode(deserializer);
                return crate::api::api::DartMessage::Edit(var_field0);
            }
            9 => {
                let mut var_field0 =
                    <crate::api::api::DartIconChangeMessage>::sse_decode(deserializer);
                return crate::api::api::DartMessage::IconChange(var_field0);
            }
            10 => {
                return crate::api::api::DartMessage::StopTyping;
            }
            11 => {
                let mut var_field0 = <bool>::sse_decode(deserializer);
                return crate::api::api::DartMessage::EnableSmsActivation(var_field0);
            }
            12 => {
                return crate::api::api::DartMessage::MessageReadOnDevice;
            }
            13 => {
                let mut var_field0 = <bool>::sse_decode(deserializer);
                return crate::api::api::DartMessage::SmsConfirmSent(var_field0);
            }
            14 => {
                return crate::api::api::DartMessage::MarkUnread;
            }
            15 => {
                return crate::api::api::DartMessage::PeerCacheInvalidate;
            }
            16 => {
                let mut var_field0 =
                    <crate::api::api::DartUpdateExtensionMessage>::sse_decode(deserializer);
                return crate::api::api::DartMessage::UpdateExtension(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::api::DartMessagePart {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::api::DartMessagePart::Text(var_field0);
            }
            1 => {
                let mut var_field0 = <crate::api::api::DartAttachment>::sse_decode(deserializer);
                return crate::api::api::DartMessagePart::Attachment(var_field0);
            }
            2 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                let mut var_field1 = <String>::sse_decode(deserializer);
                return crate::api::api::DartMessagePart::Mention(var_field0, var_field1);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::api::DartMessageParts {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 =
            <Vec<crate::api::api::DartIndexedMessagePart>>::sse_decode(deserializer);
        return crate::api::api::DartMessageParts(var_field0);
    }
}

impl SseDecode for crate::api::api::DartMessageTarget {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <Vec<u8>>::sse_decode(deserializer);
                return crate::api::api::DartMessageTarget::Token(var_field0);
            }
            1 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::api::DartMessageTarget::Uuid(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::api::DartMessageType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::api::DartMessageType::IMessage;
            }
            1 => {
                let mut var_isPhone = <bool>::sse_decode(deserializer);
                let mut var_usingNumber = <String>::sse_decode(deserializer);
                let mut var_fromHandle = <Option<String>>::sse_decode(deserializer);
                return crate::api::api::DartMessageType::SMS {
                    is_phone: var_isPhone,
                    using_number: var_usingNumber,
                    from_handle: var_fromHandle,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::api::DartMMCSFile {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_signature = <Vec<u8>>::sse_decode(deserializer);
        let mut var_object = <String>::sse_decode(deserializer);
        let mut var_url = <String>::sse_decode(deserializer);
        let mut var_key = <Vec<u8>>::sse_decode(deserializer);
        let mut var_size = <usize>::sse_decode(deserializer);
        return crate::api::api::DartMMCSFile {
            signature: var_signature,
            object: var_object,
            url: var_url,
            key: var_key,
            size: var_size,
        };
    }
}

impl SseDecode for crate::api::api::DartNormalMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_parts = <crate::api::api::DartMessageParts>::sse_decode(deserializer);
        let mut var_body = <Option<crate::api::api::DartBalloonBody>>::sse_decode(deserializer);
        let mut var_effect = <Option<String>>::sse_decode(deserializer);
        let mut var_replyGuid = <Option<String>>::sse_decode(deserializer);
        let mut var_replyPart = <Option<String>>::sse_decode(deserializer);
        let mut var_service = <crate::api::api::DartMessageType>::sse_decode(deserializer);
        return crate::api::api::DartNormalMessage {
            parts: var_parts,
            body: var_body,
            effect: var_effect,
            reply_guid: var_replyGuid,
            reply_part: var_replyPart,
            service: var_service,
        };
    }
}

impl SseDecode for crate::api::api::DartPartExtension {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_msgWidth = <f64>::sse_decode(deserializer);
                let mut var_rotation = <f64>::sse_decode(deserializer);
                let mut var_sai = <u64>::sse_decode(deserializer);
                let mut var_scale = <f64>::sse_decode(deserializer);
                let mut var_update = <Option<bool>>::sse_decode(deserializer);
                let mut var_sli = <u64>::sse_decode(deserializer);
                let mut var_normalizedX = <f64>::sse_decode(deserializer);
                let mut var_normalizedY = <f64>::sse_decode(deserializer);
                let mut var_version = <u64>::sse_decode(deserializer);
                let mut var_hash = <String>::sse_decode(deserializer);
                let mut var_safi = <u64>::sse_decode(deserializer);
                let mut var_effectType = <i64>::sse_decode(deserializer);
                let mut var_stickerId = <String>::sse_decode(deserializer);
                return crate::api::api::DartPartExtension::Sticker {
                    msg_width: var_msgWidth,
                    rotation: var_rotation,
                    sai: var_sai,
                    scale: var_scale,
                    update: var_update,
                    sli: var_sli,
                    normalized_x: var_normalizedX,
                    normalized_y: var_normalizedY,
                    version: var_version,
                    hash: var_hash,
                    safi: var_safi,
                    effect_type: var_effectType,
                    sticker_id: var_stickerId,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::api::DartPrivateDeviceInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_uuid = <Option<String>>::sse_decode(deserializer);
        let mut var_deviceName = <Option<String>>::sse_decode(deserializer);
        let mut var_token = <Vec<u8>>::sse_decode(deserializer);
        let mut var_isHsaTrusted = <bool>::sse_decode(deserializer);
        let mut var_identites = <Vec<String>>::sse_decode(deserializer);
        let mut var_subServices = <Vec<String>>::sse_decode(deserializer);
        return crate::api::api::DartPrivateDeviceInfo {
            uuid: var_uuid,
            device_name: var_deviceName,
            token: var_token,
            is_hsa_trusted: var_isHsaTrusted,
            identites: var_identites,
            sub_services: var_subServices,
        };
    }
}

impl SseDecode for crate::api::api::DartReactMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_toUuid = <String>::sse_decode(deserializer);
        let mut var_toPart = <u64>::sse_decode(deserializer);
        let mut var_reaction = <crate::api::api::DartReactMessageType>::sse_decode(deserializer);
        let mut var_toText = <String>::sse_decode(deserializer);
        return crate::api::api::DartReactMessage {
            to_uuid: var_toUuid,
            to_part: var_toPart,
            reaction: var_reaction,
            to_text: var_toText,
        };
    }
}

impl SseDecode for crate::api::api::DartReactMessageType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_reaction = <crate::api::api::DartReaction>::sse_decode(deserializer);
                let mut var_enable = <bool>::sse_decode(deserializer);
                return crate::api::api::DartReactMessageType::React {
                    reaction: var_reaction,
                    enable: var_enable,
                };
            }
            1 => {
                let mut var_spec = <Value>::sse_decode(deserializer);
                let mut var_body = <crate::api::api::DartMessageParts>::sse_decode(deserializer);
                return crate::api::api::DartReactMessageType::Extension {
                    spec: var_spec,
                    body: var_body,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::api::DartReaction {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::api::DartReaction::Heart,
            1 => crate::api::api::DartReaction::Like,
            2 => crate::api::api::DartReaction::Dislike,
            3 => crate::api::api::DartReaction::Laugh,
            4 => crate::api::api::DartReaction::Emphsize,
            5 => crate::api::api::DartReaction::Question,
            _ => unreachable!("Invalid variant for DartReaction: {}", inner),
        };
    }
}

impl SseDecode for crate::api::api::DartRegisterState {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::api::DartRegisterState::Registered;
            }
            1 => {
                return crate::api::api::DartRegisterState::Registering;
            }
            2 => {
                let mut var_retryWait = <Option<u64>>::sse_decode(deserializer);
                let mut var_error = <String>::sse_decode(deserializer);
                return crate::api::api::DartRegisterState::Failed {
                    retry_wait: var_retryWait,
                    error: var_error,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::api::DartRenameMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_newName = <String>::sse_decode(deserializer);
        return crate::api::api::DartRenameMessage {
            new_name: var_newName,
        };
    }
}

impl SseDecode for crate::api::api::DartSupportAction {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_url = <String>::sse_decode(deserializer);
        let mut var_button = <String>::sse_decode(deserializer);
        return crate::api::api::DartSupportAction {
            url: var_url,
            button: var_button,
        };
    }
}

impl SseDecode for crate::api::api::DartSupportAlert {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_title = <String>::sse_decode(deserializer);
        let mut var_body = <String>::sse_decode(deserializer);
        let mut var_action = <Option<crate::api::api::DartSupportAction>>::sse_decode(deserializer);
        return crate::api::api::DartSupportAlert {
            title: var_title,
            body: var_body,
            action: var_action,
        };
    }
}

impl SseDecode for crate::api::api::DartTrustedPhoneNumber {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_numberWithDialCode = <String>::sse_decode(deserializer);
        let mut var_lastTwoDigits = <String>::sse_decode(deserializer);
        let mut var_pushMode = <String>::sse_decode(deserializer);
        let mut var_id = <u32>::sse_decode(deserializer);
        return crate::api::api::DartTrustedPhoneNumber {
            number_with_dial_code: var_numberWithDialCode,
            last_two_digits: var_lastTwoDigits,
            push_mode: var_pushMode,
            id: var_id,
        };
    }
}

impl SseDecode for crate::api::api::DartUnsendMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_tuuid = <String>::sse_decode(deserializer);
        let mut var_editPart = <u64>::sse_decode(deserializer);
        return crate::api::api::DartUnsendMessage {
            tuuid: var_tuuid,
            edit_part: var_editPart,
        };
    }
}

impl SseDecode for crate::api::api::DartUpdateExtensionMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_forUuid = <String>::sse_decode(deserializer);
        let mut var_ext = <crate::api::api::DartPartExtension>::sse_decode(deserializer);
        return crate::api::api::DartUpdateExtensionMessage {
            for_uuid: var_forUuid,
            ext: var_ext,
        };
    }
}

impl SseDecode for f64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_f64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<String>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::api::DartIndexedMessagePart> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::api::DartIndexedMessagePart>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::api::DartMessageTarget> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::api::DartMessageTarget>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::api::DartPrivateDeviceInfo> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::api::DartPrivateDeviceInfo>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::api::DartTrustedPhoneNumber> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::api::DartTrustedPhoneNumber>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for crate::api::api::MMCSTransferProgress {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_prog = <usize>::sse_decode(deserializer);
        let mut var_total = <usize>::sse_decode(deserializer);
        let mut var_file = <Option<crate::api::api::DartMMCSFile>>::sse_decode(deserializer);
        return crate::api::api::MMCSTransferProgress {
            prog: var_prog,
            total: var_total,
            file: var_file,
        };
    }
}

impl SseDecode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<String>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<bool> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<bool>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::api::DartAttachment> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::api::DartAttachment>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::api::DartBalloonBody> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::api::DartBalloonBody>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::api::DartConversationData> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::api::DartConversationData>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::api::DartIMessage> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::api::DartIMessage>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::api::DartLoginState> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::api::DartLoginState>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::api::DartMMCSFile> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::api::DartMMCSFile>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::api::DartPartExtension> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::api::DartPartExtension>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::api::DartSupportAction> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::api::DartSupportAction>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::api::DartSupportAlert> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::api::DartSupportAlert>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<u64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<u64>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<usize> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<usize>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<crate::api::api::DartMessageTarget>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<crate::api::api::DartMessageTarget>>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for crate::api::api::PollResult {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::api::PollResult::Stop;
            }
            1 => {
                let mut var_field0 =
                    <Option<crate::api::api::DartIMessage>>::sse_decode(deserializer);
                return crate::api::api::PollResult::Cont(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode
    for (
        Vec<crate::api::api::DartTrustedPhoneNumber>,
        Option<crate::api::api::DartLoginState>,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 =
            <Vec<crate::api::api::DartTrustedPhoneNumber>>::sse_decode(deserializer);
        let mut var_field1 = <Option<crate::api::api::DartLoginState>>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for crate::api::api::RegistrationPhase {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::api::RegistrationPhase::WantsOSConfig,
            1 => crate::api::api::RegistrationPhase::WantsUserPass,
            2 => crate::api::api::RegistrationPhase::WantsRegister,
            3 => crate::api::api::RegistrationPhase::Registered,
            _ => unreachable!("Invalid variant for RegistrationPhase: {}", inner),
        };
    }
}

impl SseDecode for crate::api::api::TransferProgress {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_prog = <usize>::sse_decode(deserializer);
        let mut var_total = <usize>::sse_decode(deserializer);
        let mut var_attachment =
            <Option<crate::api::api::DartAttachment>>::sse_decode(deserializer);
        return crate::api::api::TransferProgress {
            prog: var_prog,
            total: var_total,
            attachment: var_attachment,
        };
    }
}

impl SseDecode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        9 => wire_config_from_encoded_impl(port, ptr, rust_vec_len, data_len),
        6 => wire_config_from_validation_data_impl(port, ptr, rust_vec_len, data_len),
        4 => wire_configure_app_review_impl(port, ptr, rust_vec_len, data_len),
        5 => wire_configure_macos_impl(port, ptr, rust_vec_len, data_len),
        32 => wire_convert_token_to_uuid_impl(port, ptr, rust_vec_len, data_len),
        36 => wire_dart_attachment_get_size_impl(port, ptr, rust_vec_len, data_len),
        35 => wire_dart_attachment_restore_impl(port, ptr, rust_vec_len, data_len),
        34 => wire_dart_attachment_save_impl(port, ptr, rust_vec_len, data_len),
        37 => wire_dart_message_parts_as_plain_impl(port, ptr, rust_vec_len, data_len),
        14 => wire_do_reregister_impl(port, ptr, rust_vec_len, data_len),
        18 => wire_download_attachment_impl(port, ptr, rust_vec_len, data_len),
        19 => wire_download_mmcs_impl(port, ptr, rust_vec_len, data_len),
        25 => wire_get_2fa_sms_opts_impl(port, ptr, rust_vec_len, data_len),
        8 => wire_get_device_info_impl(port, ptr, rust_vec_len, data_len),
        7 => wire_get_device_info_state_impl(port, ptr, rust_vec_len, data_len),
        13 => wire_get_handles_impl(port, ptr, rust_vec_len, data_len),
        17 => wire_get_phase_impl(port, ptr, rust_vec_len, data_len),
        31 => wire_get_regstate_impl(port, ptr, rust_vec_len, data_len),
        33 => wire_get_sms_targets_impl(port, ptr, rust_vec_len, data_len),
        30 => wire_get_user_name_impl(port, ptr, rust_vec_len, data_len),
        29 => wire_invalidate_id_cache_impl(port, ptr, rust_vec_len, data_len),
        15 => wire_new_msg_impl(port, ptr, rust_vec_len, data_len),
        1 => wire_new_push_state_impl(port, ptr, rust_vec_len, data_len),
        10 => wire_ptr_to_dart_impl(port, ptr, rust_vec_len, data_len),
        11 => wire_recv_wait_impl(port, ptr, rust_vec_len, data_len),
        3 => wire_register_ids_impl(port, ptr, rust_vec_len, data_len),
        28 => wire_reset_state_impl(port, ptr, rust_vec_len, data_len),
        12 => wire_send_impl(port, ptr, rust_vec_len, data_len),
        26 => wire_send_2fa_sms_impl(port, ptr, rust_vec_len, data_len),
        23 => wire_send_2fa_to_devices_impl(port, ptr, rust_vec_len, data_len),
        2 => wire_service_from_ptr_impl(port, ptr, rust_vec_len, data_len),
        22 => wire_try_auth_impl(port, ptr, rust_vec_len, data_len),
        21 => wire_upload_attachment_impl(port, ptr, rust_vec_len, data_len),
        20 => wire_upload_mmcs_impl(port, ptr, rust_vec_len, data_len),
        16 => wire_validate_targets_impl(port, ptr, rust_vec_len, data_len),
        24 => wire_verify_2fa_impl(port, ptr, rust_vec_len, data_len),
        27 => wire_verify_2fa_sms_impl(port, ptr, rust_vec_len, data_len),
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<Arc<PushState>> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<Arc<PushState>> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Arc<PushState>>> for Arc<PushState> {
    fn into_into_dart(self) -> FrbWrapper<Arc<PushState>> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<MacOSConfig> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<MacOSConfig> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<MacOSConfig>> for MacOSConfig {
    fn into_into_dart(self) -> FrbWrapper<MacOSConfig> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<Value> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<Value> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Value>> for Value {
    fn into_into_dart(self) -> FrbWrapper<Value> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<VerifyBody> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<VerifyBody> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<VerifyBody>> for VerifyBody {
    fn into_into_dart(self) -> FrbWrapper<VerifyBody> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::api::DartAttachment {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.a_type.into_into_dart().into_dart(),
            self.part_idx.into_into_dart().into_dart(),
            self.uti_type.into_into_dart().into_dart(),
            self.mime.into_into_dart().into_dart(),
            self.name.into_into_dart().into_dart(),
            self.iris.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::api::DartAttachment
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::api::DartAttachment>
    for crate::api::api::DartAttachment
{
    fn into_into_dart(self) -> crate::api::api::DartAttachment {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::api::DartAttachmentType {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::api::DartAttachmentType::Inline(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::api::DartAttachmentType::MMCS(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::api::DartAttachmentType
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::api::DartAttachmentType>
    for crate::api::api::DartAttachmentType
{
    fn into_into_dart(self) -> crate::api::api::DartAttachmentType {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::api::DartBalloonBody {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.bid.into_into_dart().into_dart(),
            self.data.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::api::DartBalloonBody
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::api::DartBalloonBody>
    for crate::api::api::DartBalloonBody
{
    fn into_into_dart(self) -> crate::api::api::DartBalloonBody {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::api::DartChangeParticipantMessage {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.new_participants.into_into_dart().into_dart(),
            self.group_version.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::api::DartChangeParticipantMessage
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::api::DartChangeParticipantMessage>
    for crate::api::api::DartChangeParticipantMessage
{
    fn into_into_dart(self) -> crate::api::api::DartChangeParticipantMessage {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::api::DartConversationData {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.participants.into_into_dart().into_dart(),
            self.cv_name.into_into_dart().into_dart(),
            self.sender_guid.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::api::DartConversationData
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::api::DartConversationData>
    for crate::api::api::DartConversationData
{
    fn into_into_dart(self) -> crate::api::api::DartConversationData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::api::DartDeviceInfo {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.name.into_into_dart().into_dart(),
            self.serial.into_into_dart().into_dart(),
            self.os_version.into_into_dart().into_dart(),
            self.encoded_data.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::api::DartDeviceInfo
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::api::DartDeviceInfo>
    for crate::api::api::DartDeviceInfo
{
    fn into_into_dart(self) -> crate::api::api::DartDeviceInfo {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::api::DartEditMessage {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.tuuid.into_into_dart().into_dart(),
            self.edit_part.into_into_dart().into_dart(),
            self.new_parts.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::api::DartEditMessage
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::api::DartEditMessage>
    for crate::api::api::DartEditMessage
{
    fn into_into_dart(self) -> crate::api::api::DartEditMessage {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::api::DartHwExtra {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.version.into_into_dart().into_dart(),
            self.protocol_version.into_into_dart().into_dart(),
            self.device_id.into_into_dart().into_dart(),
            self.icloud_ua.into_into_dart().into_dart(),
            self.aoskit_version.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::api::DartHwExtra {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::api::DartHwExtra>
    for crate::api::api::DartHwExtra
{
    fn into_into_dart(self) -> crate::api::api::DartHwExtra {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::api::DartIMessage {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.id.into_into_dart().into_dart(),
            self.sender.into_into_dart().into_dart(),
            self.after_guid.into_into_dart().into_dart(),
            self.conversation.into_into_dart().into_dart(),
            self.message.into_into_dart().into_dart(),
            self.sent_timestamp.into_into_dart().into_dart(),
            self.target.into_into_dart().into_dart(),
            self.send_delivered.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::api::DartIMessage {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::api::DartIMessage>
    for crate::api::api::DartIMessage
{
    fn into_into_dart(self) -> crate::api::api::DartIMessage {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::api::DartIconChangeMessage {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.file.into_into_dart().into_dart(),
            self.group_version.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::api::DartIconChangeMessage
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::api::DartIconChangeMessage>
    for crate::api::api::DartIconChangeMessage
{
    fn into_into_dart(self) -> crate::api::api::DartIconChangeMessage {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::api::DartIndexedMessagePart {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.part.into_into_dart().into_dart(),
            self.idx.into_into_dart().into_dart(),
            self.ext.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::api::DartIndexedMessagePart
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::api::DartIndexedMessagePart>
    for crate::api::api::DartIndexedMessagePart
{
    fn into_into_dart(self) -> crate::api::api::DartIndexedMessagePart {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::api::DartLoginState {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::api::DartLoginState::LoggedIn => [0.into_dart()].into_dart(),
            crate::api::api::DartLoginState::NeedsDevice2FA => [1.into_dart()].into_dart(),
            crate::api::api::DartLoginState::Needs2FAVerification => [2.into_dart()].into_dart(),
            crate::api::api::DartLoginState::NeedsSMS2FA => [3.into_dart()].into_dart(),
            crate::api::api::DartLoginState::NeedsSMS2FAVerification(field0) => {
                [4.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::api::DartLoginState::NeedsExtraStep(field0) => {
                [5.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::api::DartLoginState::NeedsLogin => [6.into_dart()].into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::api::DartLoginState
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::api::DartLoginState>
    for crate::api::api::DartLoginState
{
    fn into_into_dart(self) -> crate::api::api::DartLoginState {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::api::DartMessage {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::api::DartMessage::Message(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::api::DartMessage::RenameMessage(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::api::DartMessage::ChangeParticipants(field0) => {
                [2.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::api::DartMessage::React(field0) => {
                [3.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::api::DartMessage::Delivered => [4.into_dart()].into_dart(),
            crate::api::api::DartMessage::Read => [5.into_dart()].into_dart(),
            crate::api::api::DartMessage::Typing => [6.into_dart()].into_dart(),
            crate::api::api::DartMessage::Unsend(field0) => {
                [7.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::api::DartMessage::Edit(field0) => {
                [8.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::api::DartMessage::IconChange(field0) => {
                [9.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::api::DartMessage::StopTyping => [10.into_dart()].into_dart(),
            crate::api::api::DartMessage::EnableSmsActivation(field0) => {
                [11.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::api::DartMessage::MessageReadOnDevice => [12.into_dart()].into_dart(),
            crate::api::api::DartMessage::SmsConfirmSent(field0) => {
                [13.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::api::DartMessage::MarkUnread => [14.into_dart()].into_dart(),
            crate::api::api::DartMessage::PeerCacheInvalidate => [15.into_dart()].into_dart(),
            crate::api::api::DartMessage::UpdateExtension(field0) => {
                [16.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::api::DartMessage {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::api::DartMessage>
    for crate::api::api::DartMessage
{
    fn into_into_dart(self) -> crate::api::api::DartMessage {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::api::DartMessagePart {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::api::DartMessagePart::Text(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::api::DartMessagePart::Attachment(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::api::DartMessagePart::Mention(field0, field1) => [
                2.into_dart(),
                field0.into_into_dart().into_dart(),
                field1.into_into_dart().into_dart(),
            ]
            .into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::api::DartMessagePart
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::api::DartMessagePart>
    for crate::api::api::DartMessagePart
{
    fn into_into_dart(self) -> crate::api::api::DartMessagePart {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::api::DartMessageParts {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::api::DartMessageParts
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::api::DartMessageParts>
    for crate::api::api::DartMessageParts
{
    fn into_into_dart(self) -> crate::api::api::DartMessageParts {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::api::DartMessageTarget {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::api::DartMessageTarget::Token(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::api::DartMessageTarget::Uuid(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::api::DartMessageTarget
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::api::DartMessageTarget>
    for crate::api::api::DartMessageTarget
{
    fn into_into_dart(self) -> crate::api::api::DartMessageTarget {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::api::DartMessageType {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::api::DartMessageType::IMessage => [0.into_dart()].into_dart(),
            crate::api::api::DartMessageType::SMS {
                is_phone,
                using_number,
                from_handle,
            } => [
                1.into_dart(),
                is_phone.into_into_dart().into_dart(),
                using_number.into_into_dart().into_dart(),
                from_handle.into_into_dart().into_dart(),
            ]
            .into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::api::DartMessageType
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::api::DartMessageType>
    for crate::api::api::DartMessageType
{
    fn into_into_dart(self) -> crate::api::api::DartMessageType {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::api::DartMMCSFile {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.signature.into_into_dart().into_dart(),
            self.object.into_into_dart().into_dart(),
            self.url.into_into_dart().into_dart(),
            self.key.into_into_dart().into_dart(),
            self.size.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::api::DartMMCSFile {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::api::DartMMCSFile>
    for crate::api::api::DartMMCSFile
{
    fn into_into_dart(self) -> crate::api::api::DartMMCSFile {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::api::DartNormalMessage {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.parts.into_into_dart().into_dart(),
            self.body.into_into_dart().into_dart(),
            self.effect.into_into_dart().into_dart(),
            self.reply_guid.into_into_dart().into_dart(),
            self.reply_part.into_into_dart().into_dart(),
            self.service.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::api::DartNormalMessage
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::api::DartNormalMessage>
    for crate::api::api::DartNormalMessage
{
    fn into_into_dart(self) -> crate::api::api::DartNormalMessage {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::api::DartPartExtension {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::api::DartPartExtension::Sticker {
                msg_width,
                rotation,
                sai,
                scale,
                update,
                sli,
                normalized_x,
                normalized_y,
                version,
                hash,
                safi,
                effect_type,
                sticker_id,
            } => [
                0.into_dart(),
                msg_width.into_into_dart().into_dart(),
                rotation.into_into_dart().into_dart(),
                sai.into_into_dart().into_dart(),
                scale.into_into_dart().into_dart(),
                update.into_into_dart().into_dart(),
                sli.into_into_dart().into_dart(),
                normalized_x.into_into_dart().into_dart(),
                normalized_y.into_into_dart().into_dart(),
                version.into_into_dart().into_dart(),
                hash.into_into_dart().into_dart(),
                safi.into_into_dart().into_dart(),
                effect_type.into_into_dart().into_dart(),
                sticker_id.into_into_dart().into_dart(),
            ]
            .into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::api::DartPartExtension
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::api::DartPartExtension>
    for crate::api::api::DartPartExtension
{
    fn into_into_dart(self) -> crate::api::api::DartPartExtension {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::api::DartPrivateDeviceInfo {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.uuid.into_into_dart().into_dart(),
            self.device_name.into_into_dart().into_dart(),
            self.token.into_into_dart().into_dart(),
            self.is_hsa_trusted.into_into_dart().into_dart(),
            self.identites.into_into_dart().into_dart(),
            self.sub_services.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::api::DartPrivateDeviceInfo
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::api::DartPrivateDeviceInfo>
    for crate::api::api::DartPrivateDeviceInfo
{
    fn into_into_dart(self) -> crate::api::api::DartPrivateDeviceInfo {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::api::DartReactMessage {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.to_uuid.into_into_dart().into_dart(),
            self.to_part.into_into_dart().into_dart(),
            self.reaction.into_into_dart().into_dart(),
            self.to_text.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::api::DartReactMessage
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::api::DartReactMessage>
    for crate::api::api::DartReactMessage
{
    fn into_into_dart(self) -> crate::api::api::DartReactMessage {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::api::DartReactMessageType {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::api::DartReactMessageType::React { reaction, enable } => [
                0.into_dart(),
                reaction.into_into_dart().into_dart(),
                enable.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::api::DartReactMessageType::Extension { spec, body } => [
                1.into_dart(),
                spec.into_into_dart().into_dart(),
                body.into_into_dart().into_dart(),
            ]
            .into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::api::DartReactMessageType
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::api::DartReactMessageType>
    for crate::api::api::DartReactMessageType
{
    fn into_into_dart(self) -> crate::api::api::DartReactMessageType {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::api::DartReaction {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Heart => 0.into_dart(),
            Self::Like => 1.into_dart(),
            Self::Dislike => 2.into_dart(),
            Self::Laugh => 3.into_dart(),
            Self::Emphsize => 4.into_dart(),
            Self::Question => 5.into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::api::DartReaction {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::api::DartReaction>
    for crate::api::api::DartReaction
{
    fn into_into_dart(self) -> crate::api::api::DartReaction {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::api::DartRegisterState {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::api::DartRegisterState::Registered => [0.into_dart()].into_dart(),
            crate::api::api::DartRegisterState::Registering => [1.into_dart()].into_dart(),
            crate::api::api::DartRegisterState::Failed { retry_wait, error } => [
                2.into_dart(),
                retry_wait.into_into_dart().into_dart(),
                error.into_into_dart().into_dart(),
            ]
            .into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::api::DartRegisterState
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::api::DartRegisterState>
    for crate::api::api::DartRegisterState
{
    fn into_into_dart(self) -> crate::api::api::DartRegisterState {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::api::DartRenameMessage {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.new_name.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::api::DartRenameMessage
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::api::DartRenameMessage>
    for crate::api::api::DartRenameMessage
{
    fn into_into_dart(self) -> crate::api::api::DartRenameMessage {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::api::DartSupportAction {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.url.into_into_dart().into_dart(),
            self.button.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::api::DartSupportAction
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::api::DartSupportAction>
    for crate::api::api::DartSupportAction
{
    fn into_into_dart(self) -> crate::api::api::DartSupportAction {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::api::DartSupportAlert {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.title.into_into_dart().into_dart(),
            self.body.into_into_dart().into_dart(),
            self.action.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::api::DartSupportAlert
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::api::DartSupportAlert>
    for crate::api::api::DartSupportAlert
{
    fn into_into_dart(self) -> crate::api::api::DartSupportAlert {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::api::DartTrustedPhoneNumber {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.number_with_dial_code.into_into_dart().into_dart(),
            self.last_two_digits.into_into_dart().into_dart(),
            self.push_mode.into_into_dart().into_dart(),
            self.id.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::api::DartTrustedPhoneNumber
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::api::DartTrustedPhoneNumber>
    for crate::api::api::DartTrustedPhoneNumber
{
    fn into_into_dart(self) -> crate::api::api::DartTrustedPhoneNumber {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::api::DartUnsendMessage {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.tuuid.into_into_dart().into_dart(),
            self.edit_part.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::api::DartUnsendMessage
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::api::DartUnsendMessage>
    for crate::api::api::DartUnsendMessage
{
    fn into_into_dart(self) -> crate::api::api::DartUnsendMessage {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::api::DartUpdateExtensionMessage {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.for_uuid.into_into_dart().into_dart(),
            self.ext.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::api::DartUpdateExtensionMessage
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::api::DartUpdateExtensionMessage>
    for crate::api::api::DartUpdateExtensionMessage
{
    fn into_into_dart(self) -> crate::api::api::DartUpdateExtensionMessage {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::api::MMCSTransferProgress {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.prog.into_into_dart().into_dart(),
            self.total.into_into_dart().into_dart(),
            self.file.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::api::MMCSTransferProgress
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::api::MMCSTransferProgress>
    for crate::api::api::MMCSTransferProgress
{
    fn into_into_dart(self) -> crate::api::api::MMCSTransferProgress {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::api::PollResult {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::api::PollResult::Stop => [0.into_dart()].into_dart(),
            crate::api::api::PollResult::Cont(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::api::PollResult {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::api::PollResult>
    for crate::api::api::PollResult
{
    fn into_into_dart(self) -> crate::api::api::PollResult {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::api::RegistrationPhase {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::WantsOSConfig => 0.into_dart(),
            Self::WantsUserPass => 1.into_dart(),
            Self::WantsRegister => 2.into_dart(),
            Self::Registered => 3.into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::api::RegistrationPhase
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::api::RegistrationPhase>
    for crate::api::api::RegistrationPhase
{
    fn into_into_dart(self) -> crate::api::api::RegistrationPhase {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::api::TransferProgress {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.prog.into_into_dart().into_dart(),
            self.total.into_into_dart().into_dart(),
            self.attachment.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::api::TransferProgress
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::api::TransferProgress>
    for crate::api::api::TransferProgress
{
    fn into_into_dart(self) -> crate::api::api::TransferProgress {
        self
    }
}

impl SseEncode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(format!("{:?}", self), serializer);
    }
}

impl SseEncode for Arc<PushState> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc < PushState >>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);
    }
}

impl SseEncode for MacOSConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MacOSConfig>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);
    }
}

impl SseEncode for Value {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Value>>>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for VerifyBody {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VerifyBody>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<PushState>>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MacOSConfig>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Value>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VerifyBody>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for StreamSink<
        crate::api::api::MMCSTransferProgress,
        flutter_rust_bridge::for_generated::SseCodec,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        unimplemented!("")
    }
}

impl SseEncode
    for StreamSink<crate::api::api::TransferProgress, flutter_rust_bridge::for_generated::SseCodec>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        unimplemented!("")
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for crate::api::api::DartAttachment {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::api::DartAttachmentType>::sse_encode(self.a_type, serializer);
        <u64>::sse_encode(self.part_idx, serializer);
        <String>::sse_encode(self.uti_type, serializer);
        <String>::sse_encode(self.mime, serializer);
        <String>::sse_encode(self.name, serializer);
        <bool>::sse_encode(self.iris, serializer);
    }
}

impl SseEncode for crate::api::api::DartAttachmentType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::api::DartAttachmentType::Inline(field0) => {
                <i32>::sse_encode(0, serializer);
                <Vec<u8>>::sse_encode(field0, serializer);
            }
            crate::api::api::DartAttachmentType::MMCS(field0) => {
                <i32>::sse_encode(1, serializer);
                <crate::api::api::DartMMCSFile>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::api::DartBalloonBody {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.bid, serializer);
        <Vec<u8>>::sse_encode(self.data, serializer);
    }
}

impl SseEncode for crate::api::api::DartChangeParticipantMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<String>>::sse_encode(self.new_participants, serializer);
        <u64>::sse_encode(self.group_version, serializer);
    }
}

impl SseEncode for crate::api::api::DartConversationData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<String>>::sse_encode(self.participants, serializer);
        <Option<String>>::sse_encode(self.cv_name, serializer);
        <Option<String>>::sse_encode(self.sender_guid, serializer);
    }
}

impl SseEncode for crate::api::api::DartDeviceInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.name, serializer);
        <String>::sse_encode(self.serial, serializer);
        <String>::sse_encode(self.os_version, serializer);
        <Vec<u8>>::sse_encode(self.encoded_data, serializer);
    }
}

impl SseEncode for crate::api::api::DartEditMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.tuuid, serializer);
        <u64>::sse_encode(self.edit_part, serializer);
        <crate::api::api::DartMessageParts>::sse_encode(self.new_parts, serializer);
    }
}

impl SseEncode for crate::api::api::DartHwExtra {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.version, serializer);
        <u32>::sse_encode(self.protocol_version, serializer);
        <String>::sse_encode(self.device_id, serializer);
        <String>::sse_encode(self.icloud_ua, serializer);
        <String>::sse_encode(self.aoskit_version, serializer);
    }
}

impl SseEncode for crate::api::api::DartIMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.id, serializer);
        <Option<String>>::sse_encode(self.sender, serializer);
        <Option<String>>::sse_encode(self.after_guid, serializer);
        <Option<crate::api::api::DartConversationData>>::sse_encode(self.conversation, serializer);
        <crate::api::api::DartMessage>::sse_encode(self.message, serializer);
        <u64>::sse_encode(self.sent_timestamp, serializer);
        <Option<Vec<crate::api::api::DartMessageTarget>>>::sse_encode(self.target, serializer);
        <bool>::sse_encode(self.send_delivered, serializer);
    }
}

impl SseEncode for crate::api::api::DartIconChangeMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<crate::api::api::DartMMCSFile>>::sse_encode(self.file, serializer);
        <u64>::sse_encode(self.group_version, serializer);
    }
}

impl SseEncode for crate::api::api::DartIndexedMessagePart {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::api::DartMessagePart>::sse_encode(self.part, serializer);
        <Option<usize>>::sse_encode(self.idx, serializer);
        <Option<crate::api::api::DartPartExtension>>::sse_encode(self.ext, serializer);
    }
}

impl SseEncode for crate::api::api::DartLoginState {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::api::DartLoginState::LoggedIn => {
                <i32>::sse_encode(0, serializer);
            }
            crate::api::api::DartLoginState::NeedsDevice2FA => {
                <i32>::sse_encode(1, serializer);
            }
            crate::api::api::DartLoginState::Needs2FAVerification => {
                <i32>::sse_encode(2, serializer);
            }
            crate::api::api::DartLoginState::NeedsSMS2FA => {
                <i32>::sse_encode(3, serializer);
            }
            crate::api::api::DartLoginState::NeedsSMS2FAVerification(field0) => {
                <i32>::sse_encode(4, serializer);
                <VerifyBody>::sse_encode(field0, serializer);
            }
            crate::api::api::DartLoginState::NeedsExtraStep(field0) => {
                <i32>::sse_encode(5, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::api::DartLoginState::NeedsLogin => {
                <i32>::sse_encode(6, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::api::DartMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::api::DartMessage::Message(field0) => {
                <i32>::sse_encode(0, serializer);
                <crate::api::api::DartNormalMessage>::sse_encode(field0, serializer);
            }
            crate::api::api::DartMessage::RenameMessage(field0) => {
                <i32>::sse_encode(1, serializer);
                <crate::api::api::DartRenameMessage>::sse_encode(field0, serializer);
            }
            crate::api::api::DartMessage::ChangeParticipants(field0) => {
                <i32>::sse_encode(2, serializer);
                <crate::api::api::DartChangeParticipantMessage>::sse_encode(field0, serializer);
            }
            crate::api::api::DartMessage::React(field0) => {
                <i32>::sse_encode(3, serializer);
                <crate::api::api::DartReactMessage>::sse_encode(field0, serializer);
            }
            crate::api::api::DartMessage::Delivered => {
                <i32>::sse_encode(4, serializer);
            }
            crate::api::api::DartMessage::Read => {
                <i32>::sse_encode(5, serializer);
            }
            crate::api::api::DartMessage::Typing => {
                <i32>::sse_encode(6, serializer);
            }
            crate::api::api::DartMessage::Unsend(field0) => {
                <i32>::sse_encode(7, serializer);
                <crate::api::api::DartUnsendMessage>::sse_encode(field0, serializer);
            }
            crate::api::api::DartMessage::Edit(field0) => {
                <i32>::sse_encode(8, serializer);
                <crate::api::api::DartEditMessage>::sse_encode(field0, serializer);
            }
            crate::api::api::DartMessage::IconChange(field0) => {
                <i32>::sse_encode(9, serializer);
                <crate::api::api::DartIconChangeMessage>::sse_encode(field0, serializer);
            }
            crate::api::api::DartMessage::StopTyping => {
                <i32>::sse_encode(10, serializer);
            }
            crate::api::api::DartMessage::EnableSmsActivation(field0) => {
                <i32>::sse_encode(11, serializer);
                <bool>::sse_encode(field0, serializer);
            }
            crate::api::api::DartMessage::MessageReadOnDevice => {
                <i32>::sse_encode(12, serializer);
            }
            crate::api::api::DartMessage::SmsConfirmSent(field0) => {
                <i32>::sse_encode(13, serializer);
                <bool>::sse_encode(field0, serializer);
            }
            crate::api::api::DartMessage::MarkUnread => {
                <i32>::sse_encode(14, serializer);
            }
            crate::api::api::DartMessage::PeerCacheInvalidate => {
                <i32>::sse_encode(15, serializer);
            }
            crate::api::api::DartMessage::UpdateExtension(field0) => {
                <i32>::sse_encode(16, serializer);
                <crate::api::api::DartUpdateExtensionMessage>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::api::DartMessagePart {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::api::DartMessagePart::Text(field0) => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::api::DartMessagePart::Attachment(field0) => {
                <i32>::sse_encode(1, serializer);
                <crate::api::api::DartAttachment>::sse_encode(field0, serializer);
            }
            crate::api::api::DartMessagePart::Mention(field0, field1) => {
                <i32>::sse_encode(2, serializer);
                <String>::sse_encode(field0, serializer);
                <String>::sse_encode(field1, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::api::DartMessageParts {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::api::DartIndexedMessagePart>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::api::DartMessageTarget {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::api::DartMessageTarget::Token(field0) => {
                <i32>::sse_encode(0, serializer);
                <Vec<u8>>::sse_encode(field0, serializer);
            }
            crate::api::api::DartMessageTarget::Uuid(field0) => {
                <i32>::sse_encode(1, serializer);
                <String>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::api::DartMessageType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::api::DartMessageType::IMessage => {
                <i32>::sse_encode(0, serializer);
            }
            crate::api::api::DartMessageType::SMS {
                is_phone,
                using_number,
                from_handle,
            } => {
                <i32>::sse_encode(1, serializer);
                <bool>::sse_encode(is_phone, serializer);
                <String>::sse_encode(using_number, serializer);
                <Option<String>>::sse_encode(from_handle, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::api::DartMMCSFile {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.signature, serializer);
        <String>::sse_encode(self.object, serializer);
        <String>::sse_encode(self.url, serializer);
        <Vec<u8>>::sse_encode(self.key, serializer);
        <usize>::sse_encode(self.size, serializer);
    }
}

impl SseEncode for crate::api::api::DartNormalMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::api::DartMessageParts>::sse_encode(self.parts, serializer);
        <Option<crate::api::api::DartBalloonBody>>::sse_encode(self.body, serializer);
        <Option<String>>::sse_encode(self.effect, serializer);
        <Option<String>>::sse_encode(self.reply_guid, serializer);
        <Option<String>>::sse_encode(self.reply_part, serializer);
        <crate::api::api::DartMessageType>::sse_encode(self.service, serializer);
    }
}

impl SseEncode for crate::api::api::DartPartExtension {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::api::DartPartExtension::Sticker {
                msg_width,
                rotation,
                sai,
                scale,
                update,
                sli,
                normalized_x,
                normalized_y,
                version,
                hash,
                safi,
                effect_type,
                sticker_id,
            } => {
                <i32>::sse_encode(0, serializer);
                <f64>::sse_encode(msg_width, serializer);
                <f64>::sse_encode(rotation, serializer);
                <u64>::sse_encode(sai, serializer);
                <f64>::sse_encode(scale, serializer);
                <Option<bool>>::sse_encode(update, serializer);
                <u64>::sse_encode(sli, serializer);
                <f64>::sse_encode(normalized_x, serializer);
                <f64>::sse_encode(normalized_y, serializer);
                <u64>::sse_encode(version, serializer);
                <String>::sse_encode(hash, serializer);
                <u64>::sse_encode(safi, serializer);
                <i64>::sse_encode(effect_type, serializer);
                <String>::sse_encode(sticker_id, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::api::DartPrivateDeviceInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.uuid, serializer);
        <Option<String>>::sse_encode(self.device_name, serializer);
        <Vec<u8>>::sse_encode(self.token, serializer);
        <bool>::sse_encode(self.is_hsa_trusted, serializer);
        <Vec<String>>::sse_encode(self.identites, serializer);
        <Vec<String>>::sse_encode(self.sub_services, serializer);
    }
}

impl SseEncode for crate::api::api::DartReactMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.to_uuid, serializer);
        <u64>::sse_encode(self.to_part, serializer);
        <crate::api::api::DartReactMessageType>::sse_encode(self.reaction, serializer);
        <String>::sse_encode(self.to_text, serializer);
    }
}

impl SseEncode for crate::api::api::DartReactMessageType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::api::DartReactMessageType::React { reaction, enable } => {
                <i32>::sse_encode(0, serializer);
                <crate::api::api::DartReaction>::sse_encode(reaction, serializer);
                <bool>::sse_encode(enable, serializer);
            }
            crate::api::api::DartReactMessageType::Extension { spec, body } => {
                <i32>::sse_encode(1, serializer);
                <Value>::sse_encode(spec, serializer);
                <crate::api::api::DartMessageParts>::sse_encode(body, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::api::DartReaction {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::api::DartReaction::Heart => 0,
                crate::api::api::DartReaction::Like => 1,
                crate::api::api::DartReaction::Dislike => 2,
                crate::api::api::DartReaction::Laugh => 3,
                crate::api::api::DartReaction::Emphsize => 4,
                crate::api::api::DartReaction::Question => 5,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::api::DartRegisterState {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::api::DartRegisterState::Registered => {
                <i32>::sse_encode(0, serializer);
            }
            crate::api::api::DartRegisterState::Registering => {
                <i32>::sse_encode(1, serializer);
            }
            crate::api::api::DartRegisterState::Failed { retry_wait, error } => {
                <i32>::sse_encode(2, serializer);
                <Option<u64>>::sse_encode(retry_wait, serializer);
                <String>::sse_encode(error, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::api::DartRenameMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.new_name, serializer);
    }
}

impl SseEncode for crate::api::api::DartSupportAction {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.url, serializer);
        <String>::sse_encode(self.button, serializer);
    }
}

impl SseEncode for crate::api::api::DartSupportAlert {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.title, serializer);
        <String>::sse_encode(self.body, serializer);
        <Option<crate::api::api::DartSupportAction>>::sse_encode(self.action, serializer);
    }
}

impl SseEncode for crate::api::api::DartTrustedPhoneNumber {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.number_with_dial_code, serializer);
        <String>::sse_encode(self.last_two_digits, serializer);
        <String>::sse_encode(self.push_mode, serializer);
        <u32>::sse_encode(self.id, serializer);
    }
}

impl SseEncode for crate::api::api::DartUnsendMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.tuuid, serializer);
        <u64>::sse_encode(self.edit_part, serializer);
    }
}

impl SseEncode for crate::api::api::DartUpdateExtensionMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.for_uuid, serializer);
        <crate::api::api::DartPartExtension>::sse_encode(self.ext, serializer);
    }
}

impl SseEncode for f64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_f64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <String>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::api::DartIndexedMessagePart> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::api::DartIndexedMessagePart>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::api::DartMessageTarget> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::api::DartMessageTarget>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::api::DartPrivateDeviceInfo> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::api::DartPrivateDeviceInfo>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::api::DartTrustedPhoneNumber> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::api::DartTrustedPhoneNumber>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for crate::api::api::MMCSTransferProgress {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(self.prog, serializer);
        <usize>::sse_encode(self.total, serializer);
        <Option<crate::api::api::DartMMCSFile>>::sse_encode(self.file, serializer);
    }
}

impl SseEncode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <String>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<bool> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <bool>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::api::DartAttachment> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::api::DartAttachment>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::api::DartBalloonBody> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::api::DartBalloonBody>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::api::DartConversationData> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::api::DartConversationData>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::api::DartIMessage> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::api::DartIMessage>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::api::DartLoginState> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::api::DartLoginState>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::api::DartMMCSFile> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::api::DartMMCSFile>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::api::DartPartExtension> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::api::DartPartExtension>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::api::DartSupportAction> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::api::DartSupportAction>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::api::DartSupportAlert> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::api::DartSupportAlert>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<u64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <u64>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<usize> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <usize>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<crate::api::api::DartMessageTarget>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<crate::api::api::DartMessageTarget>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for crate::api::api::PollResult {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::api::PollResult::Stop => {
                <i32>::sse_encode(0, serializer);
            }
            crate::api::api::PollResult::Cont(field0) => {
                <i32>::sse_encode(1, serializer);
                <Option<crate::api::api::DartIMessage>>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode
    for (
        Vec<crate::api::api::DartTrustedPhoneNumber>,
        Option<crate::api::api::DartLoginState>,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::api::DartTrustedPhoneNumber>>::sse_encode(self.0, serializer);
        <Option<crate::api::api::DartLoginState>>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for crate::api::api::RegistrationPhase {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::api::RegistrationPhase::WantsOSConfig => 0,
                crate::api::api::RegistrationPhase::WantsUserPass => 1,
                crate::api::api::RegistrationPhase::WantsRegister => 2,
                crate::api::api::RegistrationPhase::Registered => 3,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::api::TransferProgress {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(self.prog, serializer);
        <usize>::sse_encode(self.total, serializer);
        <Option<crate::api::api::DartAttachment>>::sse_encode(self.attachment, serializer);
    }
}

impl SseEncode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer
            .cursor
            .write_u64::<NativeEndian>(self as _)
            .unwrap();
    }
}

#[cfg(not(target_family = "wasm"))]
#[path = "frb_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
#[path = "frb_generated.web.rs"]
mod web;
#[cfg(target_family = "wasm")]
pub use web::*;
