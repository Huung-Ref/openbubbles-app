// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.1.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/api.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'lib.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.1.0';

  @override
  int get rustContentHash => 272375654;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib_bluebubbles',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<IdsUser> crateApiApiAuthPhone(
      {required ArcPushState state,
      required String number,
      required List<int> sig});

  Future<JoinedOsConfig> crateApiApiConfigFromEncoded(
      {required List<int> encoded});

  Future<JoinedOsConfig> crateApiApiConfigFromRelay(
      {required String code, required String host, String? token});

  Future<JoinedOsConfig> crateApiApiConfigFromValidationData(
      {required List<int> data, required DartHwExtra extra});

  Future<void> crateApiApiConfigureAppReview({required ArcPushState state});

  Future<void> crateApiApiConfigureMacos(
      {required ArcPushState state, required JoinedOsConfig config});

  Future<String> crateApiApiConvertTokenToUuid(
      {required ArcPushState state,
      required String handle,
      required List<int> token});

  Future<int> crateApiApiDartAttachmentGetSize({required DartAttachment that});

  Future<DartAttachment> crateApiApiDartAttachmentRestore(
      {required String saved});

  Future<String> crateApiApiDartAttachmentSave({required DartAttachment that});

  Future<String> crateApiApiDartMessagePartsAsPlain(
      {required DartMessageParts that});

  Future<void> crateApiApiDoReregister({required ArcPushState state});

  Stream<TransferProgress> crateApiApiDownloadAttachment(
      {required ArcPushState state,
      required DartAttachment attachment,
      required String path});

  Stream<TransferProgress> crateApiApiDownloadMmcs(
      {required ArcPushState state,
      required DartMMCSFile attachment,
      required String path});

  Future<(List<DartTrustedPhoneNumber>, DartLoginState?)>
      crateApiApiGet2FaSmsOpts({required ArcPushState state});

  Future<JoinedOsConfig?> crateApiApiGetConfigState(
      {required ArcPushState state});

  Future<DartDeviceInfo> crateApiApiGetDeviceInfo(
      {required JoinedOsConfig config});

  Future<DartDeviceInfo> crateApiApiGetDeviceInfoState(
      {required ArcPushState state});

  Future<List<String>> crateApiApiGetHandles({required ArcPushState state});

  Future<RegistrationPhase> crateApiApiGetPhase({required ArcPushState state});

  Future<DartRegisterState> crateApiApiGetRegstate(
      {required ArcPushState state});

  Future<List<DartPrivateDeviceInfo>> crateApiApiGetSmsTargets(
      {required ArcPushState state,
      required String handle,
      required bool refresh});

  Future<Uint8List> crateApiApiGetToken({required ArcPushState state});

  Future<String> crateApiApiGetUserName({required ArcPushState state});

  Future<void> crateApiApiInvalidateIdCache({required ArcPushState state});

  Future<MyAsyncRuntime> crateApiApiMyAsyncRuntimeDefault();

  Future<DartIMessage> crateApiApiNewMsg(
      {required ArcPushState state,
      required DartConversationData conversation,
      required String sender,
      required DartMessage message});

  Future<ArcPushState> crateApiApiNewPushState({required String dir});

  Future<DartIMessage> crateApiApiPtrToDart({required String ptr});

  Future<PollResult> crateApiApiRecvWait({required ArcPushState state});

  Future<DartSupportAlert?> crateApiApiRegisterIds(
      {required ArcPushState state, required List<IdsUser> users});

  Future<void> crateApiApiResetState(
      {required ArcPushState state, required bool resetHw});

  Future<IdsUser> crateApiApiRestoreUser({required String user});

  Future<String> crateApiApiSaveUser({required IdsUser user});

  Future<void> crateApiApiSend(
      {required ArcPushState state, required DartIMessage msg});

  Future<DartLoginState> crateApiApiSend2FaSms(
      {required ArcPushState state, required int phoneId});

  Future<DartLoginState> crateApiApiSend2FaToDevices(
      {required ArcPushState state});

  Future<ArcPushState> crateApiApiServiceFromPtr({required String ptr});

  Future<(DartLoginState, IdsUser?)> crateApiApiTryAuth(
      {required ArcPushState state,
      required String username,
      required String password});

  Stream<TransferProgress> crateApiApiUploadAttachment(
      {required ArcPushState state,
      required String path,
      required String mime,
      required String uti,
      required String name});

  Stream<MMCSTransferProgress> crateApiApiUploadMmcs(
      {required ArcPushState state, required String path});

  Future<List<String>> crateApiApiValidateTargets(
      {required ArcPushState state,
      required List<String> targets,
      required String sender});

  Future<DartLoginState> crateApiApiVerify2Fa(
      {required ArcPushState state, required String code});

  Future<DartLoginState> crateApiApiVerify2FaSms(
      {required ArcPushState state,
      required VerifyBody body,
      required String code});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcPushState;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcPushState;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ArcPushStatePtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_IdsUser;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_IdsUser;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_IdsUserPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_JoinedOsConfig;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_JoinedOsConfig;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_JoinedOsConfigPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_VerifyBody;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_VerifyBody;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_VerifyBodyPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<IdsUser> crateApiApiAuthPhone(
      {required ArcPushState state,
      required String number,
      required List<int> sig}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        sse_encode_String(number, serializer);
        sse_encode_list_prim_u_8_loose(sig, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiAuthPhoneConstMeta,
      argValues: [state, number, sig],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiAuthPhoneConstMeta => const TaskConstMeta(
        debugName: "auth_phone",
        argNames: ["state", "number", "sig"],
      );

  @override
  Future<JoinedOsConfig> crateApiApiConfigFromEncoded(
      {required List<int> encoded}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(encoded, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiConfigFromEncodedConstMeta,
      argValues: [encoded],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiConfigFromEncodedConstMeta =>
      const TaskConstMeta(
        debugName: "config_from_encoded",
        argNames: ["encoded"],
      );

  @override
  Future<JoinedOsConfig> crateApiApiConfigFromRelay(
      {required String code, required String host, String? token}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(code, serializer);
        sse_encode_String(host, serializer);
        sse_encode_opt_String(token, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiConfigFromRelayConstMeta,
      argValues: [code, host, token],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiConfigFromRelayConstMeta => const TaskConstMeta(
        debugName: "config_from_relay",
        argNames: ["code", "host", "token"],
      );

  @override
  Future<JoinedOsConfig> crateApiApiConfigFromValidationData(
      {required List<int> data, required DartHwExtra extra}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(data, serializer);
        sse_encode_box_autoadd_dart_hw_extra(extra, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiConfigFromValidationDataConstMeta,
      argValues: [data, extra],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiConfigFromValidationDataConstMeta =>
      const TaskConstMeta(
        debugName: "config_from_validation_data",
        argNames: ["data", "extra"],
      );

  @override
  Future<void> crateApiApiConfigureAppReview({required ArcPushState state}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiConfigureAppReviewConstMeta,
      argValues: [state],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiConfigureAppReviewConstMeta =>
      const TaskConstMeta(
        debugName: "configure_app_review",
        argNames: ["state"],
      );

  @override
  Future<void> crateApiApiConfigureMacos(
      {required ArcPushState state, required JoinedOsConfig config}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig(
            config, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiConfigureMacosConstMeta,
      argValues: [state, config],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiConfigureMacosConstMeta => const TaskConstMeta(
        debugName: "configure_macos",
        argNames: ["state", "config"],
      );

  @override
  Future<String> crateApiApiConvertTokenToUuid(
      {required ArcPushState state,
      required String handle,
      required List<int> token}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        sse_encode_String(handle, serializer);
        sse_encode_list_prim_u_8_loose(token, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiConvertTokenToUuidConstMeta,
      argValues: [state, handle, token],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiConvertTokenToUuidConstMeta =>
      const TaskConstMeta(
        debugName: "convert_token_to_uuid",
        argNames: ["state", "handle", "token"],
      );

  @override
  Future<int> crateApiApiDartAttachmentGetSize({required DartAttachment that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_dart_attachment(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_CastedPrimitive_usize,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApiDartAttachmentGetSizeConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiDartAttachmentGetSizeConstMeta =>
      const TaskConstMeta(
        debugName: "dart_attachment_get_size",
        argNames: ["that"],
      );

  @override
  Future<DartAttachment> crateApiApiDartAttachmentRestore(
      {required String saved}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(saved, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_dart_attachment,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApiDartAttachmentRestoreConstMeta,
      argValues: [saved],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiDartAttachmentRestoreConstMeta =>
      const TaskConstMeta(
        debugName: "dart_attachment_restore",
        argNames: ["saved"],
      );

  @override
  Future<String> crateApiApiDartAttachmentSave({required DartAttachment that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_dart_attachment(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApiDartAttachmentSaveConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiDartAttachmentSaveConstMeta =>
      const TaskConstMeta(
        debugName: "dart_attachment_save",
        argNames: ["that"],
      );

  @override
  Future<String> crateApiApiDartMessagePartsAsPlain(
      {required DartMessageParts that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_dart_message_parts(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApiDartMessagePartsAsPlainConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiDartMessagePartsAsPlainConstMeta =>
      const TaskConstMeta(
        debugName: "dart_message_parts_as_plain",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiApiDoReregister({required ArcPushState state}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiDoReregisterConstMeta,
      argValues: [state],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiDoReregisterConstMeta => const TaskConstMeta(
        debugName: "do_reregister",
        argNames: ["state"],
      );

  @override
  Stream<TransferProgress> crateApiApiDownloadAttachment(
      {required ArcPushState state,
      required DartAttachment attachment,
      required String path}) {
    final sink = RustStreamSink<TransferProgress>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_transfer_progress_Sse(sink, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        sse_encode_box_autoadd_dart_attachment(attachment, serializer);
        sse_encode_String(path, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApiDownloadAttachmentConstMeta,
      argValues: [sink, state, attachment, path],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiApiDownloadAttachmentConstMeta =>
      const TaskConstMeta(
        debugName: "download_attachment",
        argNames: ["sink", "state", "attachment", "path"],
      );

  @override
  Stream<TransferProgress> crateApiApiDownloadMmcs(
      {required ArcPushState state,
      required DartMMCSFile attachment,
      required String path}) {
    final sink = RustStreamSink<TransferProgress>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_transfer_progress_Sse(sink, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        sse_encode_box_autoadd_dart_mmcs_file(attachment, serializer);
        sse_encode_String(path, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApiDownloadMmcsConstMeta,
      argValues: [sink, state, attachment, path],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiApiDownloadMmcsConstMeta => const TaskConstMeta(
        debugName: "download_mmcs",
        argNames: ["sink", "state", "attachment", "path"],
      );

  @override
  Future<(List<DartTrustedPhoneNumber>, DartLoginState?)>
      crateApiApiGet2FaSmsOpts({required ArcPushState state}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 15, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_record_list_dart_trusted_phone_number_opt_box_autoadd_dart_login_state,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiGet2FaSmsOptsConstMeta,
      argValues: [state],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiGet2FaSmsOptsConstMeta => const TaskConstMeta(
        debugName: "get_2fa_sms_opts",
        argNames: ["state"],
      );

  @override
  Future<JoinedOsConfig?> crateApiApiGetConfigState(
      {required ArcPushState state}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 16, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApiGetConfigStateConstMeta,
      argValues: [state],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiGetConfigStateConstMeta => const TaskConstMeta(
        debugName: "get_config_state",
        argNames: ["state"],
      );

  @override
  Future<DartDeviceInfo> crateApiApiGetDeviceInfo(
      {required JoinedOsConfig config}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig(
            config, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 17, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_dart_device_info,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiGetDeviceInfoConstMeta,
      argValues: [config],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiGetDeviceInfoConstMeta => const TaskConstMeta(
        debugName: "get_device_info",
        argNames: ["config"],
      );

  @override
  Future<DartDeviceInfo> crateApiApiGetDeviceInfoState(
      {required ArcPushState state}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 18, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_dart_device_info,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiGetDeviceInfoStateConstMeta,
      argValues: [state],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiGetDeviceInfoStateConstMeta =>
      const TaskConstMeta(
        debugName: "get_device_info_state",
        argNames: ["state"],
      );

  @override
  Future<List<String>> crateApiApiGetHandles({required ArcPushState state}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 19, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiGetHandlesConstMeta,
      argValues: [state],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiGetHandlesConstMeta => const TaskConstMeta(
        debugName: "get_handles",
        argNames: ["state"],
      );

  @override
  Future<RegistrationPhase> crateApiApiGetPhase({required ArcPushState state}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 20, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_registration_phase,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApiGetPhaseConstMeta,
      argValues: [state],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiGetPhaseConstMeta => const TaskConstMeta(
        debugName: "get_phase",
        argNames: ["state"],
      );

  @override
  Future<DartRegisterState> crateApiApiGetRegstate(
      {required ArcPushState state}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 21, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_dart_register_state,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiGetRegstateConstMeta,
      argValues: [state],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiGetRegstateConstMeta => const TaskConstMeta(
        debugName: "get_regstate",
        argNames: ["state"],
      );

  @override
  Future<List<DartPrivateDeviceInfo>> crateApiApiGetSmsTargets(
      {required ArcPushState state,
      required String handle,
      required bool refresh}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        sse_encode_String(handle, serializer);
        sse_encode_bool(refresh, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 22, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_dart_private_device_info,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiGetSmsTargetsConstMeta,
      argValues: [state, handle, refresh],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiGetSmsTargetsConstMeta => const TaskConstMeta(
        debugName: "get_sms_targets",
        argNames: ["state", "handle", "refresh"],
      );

  @override
  Future<Uint8List> crateApiApiGetToken({required ArcPushState state}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 23, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApiGetTokenConstMeta,
      argValues: [state],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiGetTokenConstMeta => const TaskConstMeta(
        debugName: "get_token",
        argNames: ["state"],
      );

  @override
  Future<String> crateApiApiGetUserName({required ArcPushState state}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 24, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiGetUserNameConstMeta,
      argValues: [state],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiGetUserNameConstMeta => const TaskConstMeta(
        debugName: "get_user_name",
        argNames: ["state"],
      );

  @override
  Future<void> crateApiApiInvalidateIdCache({required ArcPushState state}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 25, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiInvalidateIdCacheConstMeta,
      argValues: [state],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiInvalidateIdCacheConstMeta =>
      const TaskConstMeta(
        debugName: "invalidate_id_cache",
        argNames: ["state"],
      );

  @override
  Future<MyAsyncRuntime> crateApiApiMyAsyncRuntimeDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 26, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_my_async_runtime,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApiMyAsyncRuntimeDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiMyAsyncRuntimeDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "my_async_runtime_default",
        argNames: [],
      );

  @override
  Future<DartIMessage> crateApiApiNewMsg(
      {required ArcPushState state,
      required DartConversationData conversation,
      required String sender,
      required DartMessage message}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        sse_encode_box_autoadd_dart_conversation_data(conversation, serializer);
        sse_encode_String(sender, serializer);
        sse_encode_box_autoadd_dart_message(message, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 27, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_dart_i_message,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApiNewMsgConstMeta,
      argValues: [state, conversation, sender, message],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiNewMsgConstMeta => const TaskConstMeta(
        debugName: "new_msg",
        argNames: ["state", "conversation", "sender", "message"],
      );

  @override
  Future<ArcPushState> crateApiApiNewPushState({required String dir}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(dir, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 28, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApiNewPushStateConstMeta,
      argValues: [dir],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiNewPushStateConstMeta => const TaskConstMeta(
        debugName: "new_push_state",
        argNames: ["dir"],
      );

  @override
  Future<DartIMessage> crateApiApiPtrToDart({required String ptr}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(ptr, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 29, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_dart_i_message,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApiPtrToDartConstMeta,
      argValues: [ptr],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiPtrToDartConstMeta => const TaskConstMeta(
        debugName: "ptr_to_dart",
        argNames: ["ptr"],
      );

  @override
  Future<PollResult> crateApiApiRecvWait({required ArcPushState state}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 30, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_poll_result,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApiRecvWaitConstMeta,
      argValues: [state],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiRecvWaitConstMeta => const TaskConstMeta(
        debugName: "recv_wait",
        argNames: ["state"],
      );

  @override
  Future<DartSupportAlert?> crateApiApiRegisterIds(
      {required ArcPushState state, required List<IdsUser> users}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
            users, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 31, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_dart_support_alert,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiRegisterIdsConstMeta,
      argValues: [state, users],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiRegisterIdsConstMeta => const TaskConstMeta(
        debugName: "register_ids",
        argNames: ["state", "users"],
      );

  @override
  Future<void> crateApiApiResetState(
      {required ArcPushState state, required bool resetHw}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        sse_encode_bool(resetHw, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 32, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiResetStateConstMeta,
      argValues: [state, resetHw],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiResetStateConstMeta => const TaskConstMeta(
        debugName: "reset_state",
        argNames: ["state", "resetHw"],
      );

  @override
  Future<IdsUser> crateApiApiRestoreUser({required String user}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(user, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 33, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiRestoreUserConstMeta,
      argValues: [user],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiRestoreUserConstMeta => const TaskConstMeta(
        debugName: "restore_user",
        argNames: ["user"],
      );

  @override
  Future<String> crateApiApiSaveUser({required IdsUser user}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
            user, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 34, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiSaveUserConstMeta,
      argValues: [user],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiSaveUserConstMeta => const TaskConstMeta(
        debugName: "save_user",
        argNames: ["user"],
      );

  @override
  Future<void> crateApiApiSend(
      {required ArcPushState state, required DartIMessage msg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        sse_encode_box_autoadd_dart_i_message(msg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 35, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiSendConstMeta,
      argValues: [state, msg],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiSendConstMeta => const TaskConstMeta(
        debugName: "send",
        argNames: ["state", "msg"],
      );

  @override
  Future<DartLoginState> crateApiApiSend2FaSms(
      {required ArcPushState state, required int phoneId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        sse_encode_u_32(phoneId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 36, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_dart_login_state,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiSend2FaSmsConstMeta,
      argValues: [state, phoneId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiSend2FaSmsConstMeta => const TaskConstMeta(
        debugName: "send_2fa_sms",
        argNames: ["state", "phoneId"],
      );

  @override
  Future<DartLoginState> crateApiApiSend2FaToDevices(
      {required ArcPushState state}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 37, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_dart_login_state,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiSend2FaToDevicesConstMeta,
      argValues: [state],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiSend2FaToDevicesConstMeta =>
      const TaskConstMeta(
        debugName: "send_2fa_to_devices",
        argNames: ["state"],
      );

  @override
  Future<ArcPushState> crateApiApiServiceFromPtr({required String ptr}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(ptr, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 38, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApiServiceFromPtrConstMeta,
      argValues: [ptr],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiServiceFromPtrConstMeta => const TaskConstMeta(
        debugName: "service_from_ptr",
        argNames: ["ptr"],
      );

  @override
  Future<(DartLoginState, IdsUser?)> crateApiApiTryAuth(
      {required ArcPushState state,
      required String username,
      required String password}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        sse_encode_String(username, serializer);
        sse_encode_String(password, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 39, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_record_dart_login_state_opt_box_autoadd_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_ids_user,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiTryAuthConstMeta,
      argValues: [state, username, password],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiTryAuthConstMeta => const TaskConstMeta(
        debugName: "try_auth",
        argNames: ["state", "username", "password"],
      );

  @override
  Stream<TransferProgress> crateApiApiUploadAttachment(
      {required ArcPushState state,
      required String path,
      required String mime,
      required String uti,
      required String name}) {
    final sink = RustStreamSink<TransferProgress>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_transfer_progress_Sse(sink, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        sse_encode_String(path, serializer);
        sse_encode_String(mime, serializer);
        sse_encode_String(uti, serializer);
        sse_encode_String(name, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 40, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApiUploadAttachmentConstMeta,
      argValues: [sink, state, path, mime, uti, name],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiApiUploadAttachmentConstMeta =>
      const TaskConstMeta(
        debugName: "upload_attachment",
        argNames: ["sink", "state", "path", "mime", "uti", "name"],
      );

  @override
  Stream<MMCSTransferProgress> crateApiApiUploadMmcs(
      {required ArcPushState state, required String path}) {
    final sink = RustStreamSink<MMCSTransferProgress>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_mmcs_transfer_progress_Sse(sink, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        sse_encode_String(path, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 41, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApiUploadMmcsConstMeta,
      argValues: [sink, state, path],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiApiUploadMmcsConstMeta => const TaskConstMeta(
        debugName: "upload_mmcs",
        argNames: ["sink", "state", "path"],
      );

  @override
  Future<List<String>> crateApiApiValidateTargets(
      {required ArcPushState state,
      required List<String> targets,
      required String sender}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        sse_encode_list_String(targets, serializer);
        sse_encode_String(sender, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 42, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiValidateTargetsConstMeta,
      argValues: [state, targets, sender],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiValidateTargetsConstMeta => const TaskConstMeta(
        debugName: "validate_targets",
        argNames: ["state", "targets", "sender"],
      );

  @override
  Future<DartLoginState> crateApiApiVerify2Fa(
      {required ArcPushState state, required String code}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        sse_encode_String(code, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 43, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_dart_login_state,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiVerify2FaConstMeta,
      argValues: [state, code],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiVerify2FaConstMeta => const TaskConstMeta(
        debugName: "verify_2fa",
        argNames: ["state", "code"],
      );

  @override
  Future<DartLoginState> crateApiApiVerify2FaSms(
      {required ArcPushState state,
      required VerifyBody body,
      required String code}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
            state, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyBody(
            body, serializer);
        sse_encode_String(code, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 44, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_dart_login_state,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiApiVerify2FaSmsConstMeta,
      argValues: [state, body, code],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiVerify2FaSmsConstMeta => const TaskConstMeta(
        debugName: "verify_2fa_sms",
        argNames: ["state", "body", "code"],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcPushState => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcPushState => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_IdsUser => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_IdsUser => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_JoinedOsConfig => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_JoinedOsConfig => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_VerifyBody => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyBody;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_VerifyBody => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyBody;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  ArcPushState
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcPushStateImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  IdsUser
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return IdsUserImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  JoinedOsConfig
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return JoinedOsConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  VerifyBody
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyBody(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VerifyBodyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ArcPushState
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcPushStateImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  IdsUser
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return IdsUserImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  JoinedOsConfig
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return JoinedOsConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  VerifyBody
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyBody(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VerifyBodyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  int dco_decode_CastedPrimitive_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError(
        'Not implemented in this codec, please use the other one');
  }

  @protected
  int dco_decode_CastedPrimitive_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError(
        'Not implemented in this codec, please use the other one');
  }

  @protected
  ArcPushState
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcPushStateImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  IdsUser
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return IdsUserImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  JoinedOsConfig
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return JoinedOsConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  VerifyBody
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyBody(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VerifyBodyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RustStreamSink<MMCSTransferProgress>
      dco_decode_StreamSink_mmcs_transfer_progress_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<TransferProgress> dco_decode_StreamSink_transfer_progress_Sse(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  IdsUser
      dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
        raw);
  }

  @protected
  JoinedOsConfig
      dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig(
        raw);
  }

  @protected
  bool dco_decode_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  DartAttachment dco_decode_box_autoadd_dart_attachment(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_dart_attachment(raw);
  }

  @protected
  DartBalloon dco_decode_box_autoadd_dart_balloon(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_dart_balloon(raw);
  }

  @protected
  DartChangeParticipantMessage
      dco_decode_box_autoadd_dart_change_participant_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_dart_change_participant_message(raw);
  }

  @protected
  DartConversationData dco_decode_box_autoadd_dart_conversation_data(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_dart_conversation_data(raw);
  }

  @protected
  DartEditMessage dco_decode_box_autoadd_dart_edit_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_dart_edit_message(raw);
  }

  @protected
  DartExtensionApp dco_decode_box_autoadd_dart_extension_app(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_dart_extension_app(raw);
  }

  @protected
  DartHwExtra dco_decode_box_autoadd_dart_hw_extra(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_dart_hw_extra(raw);
  }

  @protected
  DartIMessage dco_decode_box_autoadd_dart_i_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_dart_i_message(raw);
  }

  @protected
  DartIconChangeMessage dco_decode_box_autoadd_dart_icon_change_message(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_dart_icon_change_message(raw);
  }

  @protected
  DartLoginState dco_decode_box_autoadd_dart_login_state(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_dart_login_state(raw);
  }

  @protected
  DartMessage dco_decode_box_autoadd_dart_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_dart_message(raw);
  }

  @protected
  DartMessageParts dco_decode_box_autoadd_dart_message_parts(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_dart_message_parts(raw);
  }

  @protected
  DartMMCSFile dco_decode_box_autoadd_dart_mmcs_file(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_dart_mmcs_file(raw);
  }

  @protected
  DartNormalMessage dco_decode_box_autoadd_dart_normal_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_dart_normal_message(raw);
  }

  @protected
  DartPartExtension dco_decode_box_autoadd_dart_part_extension(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_dart_part_extension(raw);
  }

  @protected
  DartReactMessage dco_decode_box_autoadd_dart_react_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_dart_react_message(raw);
  }

  @protected
  DartRenameMessage dco_decode_box_autoadd_dart_rename_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_dart_rename_message(raw);
  }

  @protected
  DartSupportAction dco_decode_box_autoadd_dart_support_action(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_dart_support_action(raw);
  }

  @protected
  DartSupportAlert dco_decode_box_autoadd_dart_support_alert(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_dart_support_alert(raw);
  }

  @protected
  DartUnsendMessage dco_decode_box_autoadd_dart_unsend_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_dart_unsend_message(raw);
  }

  @protected
  DartUpdateExtensionMessage
      dco_decode_box_autoadd_dart_update_extension_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_dart_update_extension_message(raw);
  }

  @protected
  BigInt dco_decode_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_u_64(raw);
  }

  @protected
  DartAttachment dco_decode_dart_attachment(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return DartAttachment(
      aType: dco_decode_dart_attachment_type(arr[0]),
      partIdx: dco_decode_CastedPrimitive_u_64(arr[1]),
      utiType: dco_decode_String(arr[2]),
      mime: dco_decode_String(arr[3]),
      name: dco_decode_String(arr[4]),
      iris: dco_decode_bool(arr[5]),
    );
  }

  @protected
  DartAttachmentType dco_decode_dart_attachment_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return DartAttachmentType_Inline(
          dco_decode_list_prim_u_8_strict(raw[1]),
        );
      case 1:
        return DartAttachmentType_MMCS(
          dco_decode_box_autoadd_dart_mmcs_file(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  DartBalloon dco_decode_dart_balloon(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return DartBalloon(
      url: dco_decode_String(arr[0]),
      session: dco_decode_opt_String(arr[1]),
      layout: dco_decode_dart_balloon_layout(arr[2]),
      ldText: dco_decode_opt_String(arr[3]),
      isLive: dco_decode_bool(arr[4]),
      icon: dco_decode_list_prim_u_8_strict(arr[5]),
    );
  }

  @protected
  DartBalloonLayout dco_decode_dart_balloon_layout(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return DartBalloonLayout_TemplateLayout(
          imageSubtitle: dco_decode_String(raw[1]),
          imageTitle: dco_decode_String(raw[2]),
          caption: dco_decode_String(raw[3]),
          secondarySubcaption: dco_decode_String(raw[4]),
          tertiarySubcaption: dco_decode_String(raw[5]),
          subcaption: dco_decode_String(raw[6]),
          class_: dco_decode_ns_dictionary_class(raw[7]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  DartChangeParticipantMessage dco_decode_dart_change_participant_message(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return DartChangeParticipantMessage(
      newParticipants: dco_decode_list_String(arr[0]),
      groupVersion: dco_decode_CastedPrimitive_u_64(arr[1]),
    );
  }

  @protected
  DartConversationData dco_decode_dart_conversation_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return DartConversationData(
      participants: dco_decode_list_String(arr[0]),
      cvName: dco_decode_opt_String(arr[1]),
      senderGuid: dco_decode_opt_String(arr[2]),
      afterGuid: dco_decode_opt_String(arr[3]),
    );
  }

  @protected
  DartDeviceInfo dco_decode_dart_device_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return DartDeviceInfo(
      name: dco_decode_String(arr[0]),
      serial: dco_decode_String(arr[1]),
      osVersion: dco_decode_String(arr[2]),
      encodedData: dco_decode_opt_list_prim_u_8_strict(arr[3]),
    );
  }

  @protected
  DartEditMessage dco_decode_dart_edit_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return DartEditMessage(
      tuuid: dco_decode_String(arr[0]),
      editPart: dco_decode_CastedPrimitive_u_64(arr[1]),
      newParts: dco_decode_dart_message_parts(arr[2]),
    );
  }

  @protected
  DartExtensionApp dco_decode_dart_extension_app(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return DartExtensionApp(
      name: dco_decode_String(arr[0]),
      appId: dco_decode_CastedPrimitive_u_64(arr[1]),
      bundleId: dco_decode_String(arr[2]),
      balloon: dco_decode_opt_box_autoadd_dart_balloon(arr[3]),
    );
  }

  @protected
  DartHwExtra dco_decode_dart_hw_extra(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return DartHwExtra(
      version: dco_decode_String(arr[0]),
      protocolVersion: dco_decode_u_32(arr[1]),
      deviceId: dco_decode_String(arr[2]),
      icloudUa: dco_decode_String(arr[3]),
      aoskitVersion: dco_decode_String(arr[4]),
    );
  }

  @protected
  DartIMessage dco_decode_dart_i_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return DartIMessage(
      id: dco_decode_String(arr[0]),
      sender: dco_decode_opt_String(arr[1]),
      conversation: dco_decode_opt_box_autoadd_dart_conversation_data(arr[2]),
      message: dco_decode_dart_message(arr[3]),
      sentTimestamp: dco_decode_CastedPrimitive_u_64(arr[4]),
      target: dco_decode_opt_list_dart_message_target(arr[5]),
      sendDelivered: dco_decode_bool(arr[6]),
    );
  }

  @protected
  DartIconChangeMessage dco_decode_dart_icon_change_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return DartIconChangeMessage(
      file: dco_decode_opt_box_autoadd_dart_mmcs_file(arr[0]),
      groupVersion: dco_decode_CastedPrimitive_u_64(arr[1]),
    );
  }

  @protected
  DartIndexedMessagePart dco_decode_dart_indexed_message_part(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return DartIndexedMessagePart(
      part_: dco_decode_dart_message_part(arr[0]),
      idx: dco_decode_opt_CastedPrimitive_usize(arr[1]),
      ext: dco_decode_opt_box_autoadd_dart_part_extension(arr[2]),
    );
  }

  @protected
  DartLoginState dco_decode_dart_login_state(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return DartLoginState_LoggedIn();
      case 1:
        return DartLoginState_NeedsDevice2FA();
      case 2:
        return DartLoginState_Needs2FAVerification();
      case 3:
        return DartLoginState_NeedsSMS2FA();
      case 4:
        return DartLoginState_NeedsSMS2FAVerification(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyBody(
              raw[1]),
        );
      case 5:
        return DartLoginState_NeedsExtraStep(
          dco_decode_String(raw[1]),
        );
      case 6:
        return DartLoginState_NeedsLogin();
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  DartMessage dco_decode_dart_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return DartMessage_Message(
          dco_decode_box_autoadd_dart_normal_message(raw[1]),
        );
      case 1:
        return DartMessage_RenameMessage(
          dco_decode_box_autoadd_dart_rename_message(raw[1]),
        );
      case 2:
        return DartMessage_ChangeParticipants(
          dco_decode_box_autoadd_dart_change_participant_message(raw[1]),
        );
      case 3:
        return DartMessage_React(
          dco_decode_box_autoadd_dart_react_message(raw[1]),
        );
      case 4:
        return DartMessage_Delivered();
      case 5:
        return DartMessage_Read();
      case 6:
        return DartMessage_Typing();
      case 7:
        return DartMessage_Unsend(
          dco_decode_box_autoadd_dart_unsend_message(raw[1]),
        );
      case 8:
        return DartMessage_Edit(
          dco_decode_box_autoadd_dart_edit_message(raw[1]),
        );
      case 9:
        return DartMessage_IconChange(
          dco_decode_box_autoadd_dart_icon_change_message(raw[1]),
        );
      case 10:
        return DartMessage_StopTyping();
      case 11:
        return DartMessage_EnableSmsActivation(
          dco_decode_bool(raw[1]),
        );
      case 12:
        return DartMessage_MessageReadOnDevice();
      case 13:
        return DartMessage_SmsConfirmSent(
          dco_decode_bool(raw[1]),
        );
      case 14:
        return DartMessage_MarkUnread();
      case 15:
        return DartMessage_PeerCacheInvalidate();
      case 16:
        return DartMessage_UpdateExtension(
          dco_decode_box_autoadd_dart_update_extension_message(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  DartMessagePart dco_decode_dart_message_part(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return DartMessagePart_Text(
          dco_decode_String(raw[1]),
        );
      case 1:
        return DartMessagePart_Attachment(
          dco_decode_box_autoadd_dart_attachment(raw[1]),
        );
      case 2:
        return DartMessagePart_Mention(
          dco_decode_String(raw[1]),
          dco_decode_String(raw[2]),
        );
      case 3:
        return DartMessagePart_Object(
          dco_decode_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  DartMessageParts dco_decode_dart_message_parts(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return DartMessageParts(
      field0: dco_decode_list_dart_indexed_message_part(arr[0]),
    );
  }

  @protected
  DartMessageTarget dco_decode_dart_message_target(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return DartMessageTarget_Token(
          dco_decode_list_prim_u_8_strict(raw[1]),
        );
      case 1:
        return DartMessageTarget_Uuid(
          dco_decode_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  DartMessageType dco_decode_dart_message_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return DartMessageType_IMessage();
      case 1:
        return DartMessageType_SMS(
          isPhone: dco_decode_bool(raw[1]),
          usingNumber: dco_decode_String(raw[2]),
          fromHandle: dco_decode_opt_String(raw[3]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  DartMMCSFile dco_decode_dart_mmcs_file(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return DartMMCSFile(
      signature: dco_decode_list_prim_u_8_strict(arr[0]),
      object: dco_decode_String(arr[1]),
      url: dco_decode_String(arr[2]),
      key: dco_decode_list_prim_u_8_strict(arr[3]),
      size: dco_decode_CastedPrimitive_usize(arr[4]),
    );
  }

  @protected
  DartNormalMessage dco_decode_dart_normal_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return DartNormalMessage(
      parts: dco_decode_dart_message_parts(arr[0]),
      effect: dco_decode_opt_String(arr[1]),
      replyGuid: dco_decode_opt_String(arr[2]),
      replyPart: dco_decode_opt_String(arr[3]),
      service: dco_decode_dart_message_type(arr[4]),
      subject: dco_decode_opt_String(arr[5]),
      app: dco_decode_opt_box_autoadd_dart_extension_app(arr[6]),
    );
  }

  @protected
  DartPartExtension dco_decode_dart_part_extension(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return DartPartExtension_Sticker(
          msgWidth: dco_decode_f_64(raw[1]),
          rotation: dco_decode_f_64(raw[2]),
          sai: dco_decode_u_64(raw[3]),
          scale: dco_decode_f_64(raw[4]),
          update: dco_decode_opt_box_autoadd_bool(raw[5]),
          sli: dco_decode_u_64(raw[6]),
          normalizedX: dco_decode_f_64(raw[7]),
          normalizedY: dco_decode_f_64(raw[8]),
          version: dco_decode_u_64(raw[9]),
          hash: dco_decode_String(raw[10]),
          safi: dco_decode_u_64(raw[11]),
          effectType: dco_decode_i_64(raw[12]),
          stickerId: dco_decode_String(raw[13]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  DartPrivateDeviceInfo dco_decode_dart_private_device_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return DartPrivateDeviceInfo(
      uuid: dco_decode_opt_String(arr[0]),
      deviceName: dco_decode_opt_String(arr[1]),
      token: dco_decode_list_prim_u_8_strict(arr[2]),
      isHsaTrusted: dco_decode_bool(arr[3]),
      identites: dco_decode_list_String(arr[4]),
      subServices: dco_decode_list_String(arr[5]),
    );
  }

  @protected
  DartReactMessage dco_decode_dart_react_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return DartReactMessage(
      toUuid: dco_decode_String(arr[0]),
      toPart: dco_decode_opt_CastedPrimitive_u_64(arr[1]),
      reaction: dco_decode_dart_react_message_type(arr[2]),
      toText: dco_decode_String(arr[3]),
    );
  }

  @protected
  DartReactMessageType dco_decode_dart_react_message_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return DartReactMessageType_React(
          reaction: dco_decode_dart_reaction(raw[1]),
          enable: dco_decode_bool(raw[2]),
        );
      case 1:
        return DartReactMessageType_Extension(
          spec: dco_decode_box_autoadd_dart_extension_app(raw[1]),
          body: dco_decode_box_autoadd_dart_message_parts(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  DartReaction dco_decode_dart_reaction(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DartReaction.values[raw as int];
  }

  @protected
  DartRegisterState dco_decode_dart_register_state(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return DartRegisterState_Registered();
      case 1:
        return DartRegisterState_Registering();
      case 2:
        return DartRegisterState_Failed(
          retryWait: dco_decode_opt_box_autoadd_u_64(raw[1]),
          error: dco_decode_String(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  DartRenameMessage dco_decode_dart_rename_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return DartRenameMessage(
      newName: dco_decode_String(arr[0]),
    );
  }

  @protected
  DartSupportAction dco_decode_dart_support_action(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return DartSupportAction(
      url: dco_decode_String(arr[0]),
      button: dco_decode_String(arr[1]),
    );
  }

  @protected
  DartSupportAlert dco_decode_dart_support_alert(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return DartSupportAlert(
      title: dco_decode_String(arr[0]),
      body: dco_decode_String(arr[1]),
      action: dco_decode_opt_box_autoadd_dart_support_action(arr[2]),
    );
  }

  @protected
  DartTrustedPhoneNumber dco_decode_dart_trusted_phone_number(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return DartTrustedPhoneNumber(
      numberWithDialCode: dco_decode_String(arr[0]),
      lastTwoDigits: dco_decode_String(arr[1]),
      pushMode: dco_decode_String(arr[2]),
      id: dco_decode_u_32(arr[3]),
    );
  }

  @protected
  DartUnsendMessage dco_decode_dart_unsend_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return DartUnsendMessage(
      tuuid: dco_decode_String(arr[0]),
      editPart: dco_decode_CastedPrimitive_u_64(arr[1]),
    );
  }

  @protected
  DartUpdateExtensionMessage dco_decode_dart_update_extension_message(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return DartUpdateExtensionMessage(
      forUuid: dco_decode_String(arr[0]),
      ext: dco_decode_dart_part_extension(arr[1]),
    );
  }

  @protected
  double dco_decode_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  List<IdsUser>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser)
        .toList();
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<DartIndexedMessagePart> dco_decode_list_dart_indexed_message_part(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_dart_indexed_message_part)
        .toList();
  }

  @protected
  List<DartMessageTarget> dco_decode_list_dart_message_target(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_dart_message_target).toList();
  }

  @protected
  List<DartPrivateDeviceInfo> dco_decode_list_dart_private_device_info(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_dart_private_device_info)
        .toList();
  }

  @protected
  List<DartTrustedPhoneNumber> dco_decode_list_dart_trusted_phone_number(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_dart_trusted_phone_number)
        .toList();
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  MMCSTransferProgress dco_decode_mmcs_transfer_progress(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return MMCSTransferProgress(
      prog: dco_decode_CastedPrimitive_usize(arr[0]),
      total: dco_decode_CastedPrimitive_usize(arr[1]),
      file: dco_decode_opt_box_autoadd_dart_mmcs_file(arr[2]),
    );
  }

  @protected
  MyAsyncRuntime dco_decode_my_async_runtime(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 0)
      throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return MyAsyncRuntime();
  }

  @protected
  NSDictionaryClass dco_decode_ns_dictionary_class(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NSDictionaryClass.values[raw as int];
  }

  @protected
  int? dco_decode_opt_CastedPrimitive_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_CastedPrimitive_u_64(raw);
  }

  @protected
  int? dco_decode_opt_CastedPrimitive_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_CastedPrimitive_usize(raw);
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  IdsUser?
      dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
            raw);
  }

  @protected
  JoinedOsConfig?
      dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig(
            raw);
  }

  @protected
  bool? dco_decode_opt_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_bool(raw);
  }

  @protected
  DartAttachment? dco_decode_opt_box_autoadd_dart_attachment(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_dart_attachment(raw);
  }

  @protected
  DartBalloon? dco_decode_opt_box_autoadd_dart_balloon(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_dart_balloon(raw);
  }

  @protected
  DartConversationData? dco_decode_opt_box_autoadd_dart_conversation_data(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_dart_conversation_data(raw);
  }

  @protected
  DartExtensionApp? dco_decode_opt_box_autoadd_dart_extension_app(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_dart_extension_app(raw);
  }

  @protected
  DartIMessage? dco_decode_opt_box_autoadd_dart_i_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_dart_i_message(raw);
  }

  @protected
  DartLoginState? dco_decode_opt_box_autoadd_dart_login_state(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_dart_login_state(raw);
  }

  @protected
  DartMMCSFile? dco_decode_opt_box_autoadd_dart_mmcs_file(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_dart_mmcs_file(raw);
  }

  @protected
  DartPartExtension? dco_decode_opt_box_autoadd_dart_part_extension(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_dart_part_extension(raw);
  }

  @protected
  DartSupportAction? dco_decode_opt_box_autoadd_dart_support_action(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_dart_support_action(raw);
  }

  @protected
  DartSupportAlert? dco_decode_opt_box_autoadd_dart_support_alert(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_dart_support_alert(raw);
  }

  @protected
  BigInt? dco_decode_opt_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_64(raw);
  }

  @protected
  List<DartMessageTarget>? dco_decode_opt_list_dart_message_target(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_dart_message_target(raw);
  }

  @protected
  Uint8List? dco_decode_opt_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_prim_u_8_strict(raw);
  }

  @protected
  PollResult dco_decode_poll_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return PollResult_Stop();
      case 1:
        return PollResult_Cont(
          dco_decode_opt_box_autoadd_dart_i_message(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  (
    DartLoginState,
    IdsUser?
  ) dco_decode_record_dart_login_state_opt_box_autoadd_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_ids_user(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_dart_login_state(arr[0]),
      dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
          arr[1]),
    );
  }

  @protected
  (
    List<DartTrustedPhoneNumber>,
    DartLoginState?
  ) dco_decode_record_list_dart_trusted_phone_number_opt_box_autoadd_dart_login_state(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_list_dart_trusted_phone_number(arr[0]),
      dco_decode_opt_box_autoadd_dart_login_state(arr[1]),
    );
  }

  @protected
  RegistrationPhase dco_decode_registration_phase(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RegistrationPhase.values[raw as int];
  }

  @protected
  TransferProgress dco_decode_transfer_progress(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return TransferProgress(
      prog: dco_decode_CastedPrimitive_usize(arr[0]),
      total: dco_decode_CastedPrimitive_usize(arr[1]),
      attachment: dco_decode_opt_box_autoadd_dart_attachment(arr[2]),
    );
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  ArcPushState
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcPushStateImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  IdsUser
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return IdsUserImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  JoinedOsConfig
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return JoinedOsConfigImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  VerifyBody
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyBody(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VerifyBodyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ArcPushState
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcPushStateImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  IdsUser
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return IdsUserImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  JoinedOsConfig
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return JoinedOsConfigImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  VerifyBody
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyBody(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VerifyBodyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  int sse_decode_CastedPrimitive_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_u_64(deserializer);
    return inner.toInt();
  }

  @protected
  int sse_decode_CastedPrimitive_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_usize(deserializer);
    return inner.toInt();
  }

  @protected
  ArcPushState
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcPushStateImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  IdsUser
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return IdsUserImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  JoinedOsConfig
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return JoinedOsConfigImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  VerifyBody
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyBody(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VerifyBodyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RustStreamSink<MMCSTransferProgress>
      sse_decode_StreamSink_mmcs_transfer_progress_Sse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<TransferProgress> sse_decode_StreamSink_transfer_progress_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  IdsUser
      sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
        deserializer));
  }

  @protected
  JoinedOsConfig
      sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig(
        deserializer));
  }

  @protected
  bool sse_decode_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_bool(deserializer));
  }

  @protected
  DartAttachment sse_decode_box_autoadd_dart_attachment(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_dart_attachment(deserializer));
  }

  @protected
  DartBalloon sse_decode_box_autoadd_dart_balloon(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_dart_balloon(deserializer));
  }

  @protected
  DartChangeParticipantMessage
      sse_decode_box_autoadd_dart_change_participant_message(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_dart_change_participant_message(deserializer));
  }

  @protected
  DartConversationData sse_decode_box_autoadd_dart_conversation_data(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_dart_conversation_data(deserializer));
  }

  @protected
  DartEditMessage sse_decode_box_autoadd_dart_edit_message(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_dart_edit_message(deserializer));
  }

  @protected
  DartExtensionApp sse_decode_box_autoadd_dart_extension_app(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_dart_extension_app(deserializer));
  }

  @protected
  DartHwExtra sse_decode_box_autoadd_dart_hw_extra(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_dart_hw_extra(deserializer));
  }

  @protected
  DartIMessage sse_decode_box_autoadd_dart_i_message(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_dart_i_message(deserializer));
  }

  @protected
  DartIconChangeMessage sse_decode_box_autoadd_dart_icon_change_message(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_dart_icon_change_message(deserializer));
  }

  @protected
  DartLoginState sse_decode_box_autoadd_dart_login_state(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_dart_login_state(deserializer));
  }

  @protected
  DartMessage sse_decode_box_autoadd_dart_message(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_dart_message(deserializer));
  }

  @protected
  DartMessageParts sse_decode_box_autoadd_dart_message_parts(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_dart_message_parts(deserializer));
  }

  @protected
  DartMMCSFile sse_decode_box_autoadd_dart_mmcs_file(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_dart_mmcs_file(deserializer));
  }

  @protected
  DartNormalMessage sse_decode_box_autoadd_dart_normal_message(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_dart_normal_message(deserializer));
  }

  @protected
  DartPartExtension sse_decode_box_autoadd_dart_part_extension(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_dart_part_extension(deserializer));
  }

  @protected
  DartReactMessage sse_decode_box_autoadd_dart_react_message(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_dart_react_message(deserializer));
  }

  @protected
  DartRenameMessage sse_decode_box_autoadd_dart_rename_message(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_dart_rename_message(deserializer));
  }

  @protected
  DartSupportAction sse_decode_box_autoadd_dart_support_action(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_dart_support_action(deserializer));
  }

  @protected
  DartSupportAlert sse_decode_box_autoadd_dart_support_alert(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_dart_support_alert(deserializer));
  }

  @protected
  DartUnsendMessage sse_decode_box_autoadd_dart_unsend_message(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_dart_unsend_message(deserializer));
  }

  @protected
  DartUpdateExtensionMessage
      sse_decode_box_autoadd_dart_update_extension_message(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_dart_update_extension_message(deserializer));
  }

  @protected
  BigInt sse_decode_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_64(deserializer));
  }

  @protected
  DartAttachment sse_decode_dart_attachment(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_aType = sse_decode_dart_attachment_type(deserializer);
    var var_partIdx = sse_decode_CastedPrimitive_u_64(deserializer);
    var var_utiType = sse_decode_String(deserializer);
    var var_mime = sse_decode_String(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_iris = sse_decode_bool(deserializer);
    return DartAttachment(
        aType: var_aType,
        partIdx: var_partIdx,
        utiType: var_utiType,
        mime: var_mime,
        name: var_name,
        iris: var_iris);
  }

  @protected
  DartAttachmentType sse_decode_dart_attachment_type(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_list_prim_u_8_strict(deserializer);
        return DartAttachmentType_Inline(var_field0);
      case 1:
        var var_field0 = sse_decode_box_autoadd_dart_mmcs_file(deserializer);
        return DartAttachmentType_MMCS(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  DartBalloon sse_decode_dart_balloon(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_url = sse_decode_String(deserializer);
    var var_session = sse_decode_opt_String(deserializer);
    var var_layout = sse_decode_dart_balloon_layout(deserializer);
    var var_ldText = sse_decode_opt_String(deserializer);
    var var_isLive = sse_decode_bool(deserializer);
    var var_icon = sse_decode_list_prim_u_8_strict(deserializer);
    return DartBalloon(
        url: var_url,
        session: var_session,
        layout: var_layout,
        ldText: var_ldText,
        isLive: var_isLive,
        icon: var_icon);
  }

  @protected
  DartBalloonLayout sse_decode_dart_balloon_layout(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_imageSubtitle = sse_decode_String(deserializer);
        var var_imageTitle = sse_decode_String(deserializer);
        var var_caption = sse_decode_String(deserializer);
        var var_secondarySubcaption = sse_decode_String(deserializer);
        var var_tertiarySubcaption = sse_decode_String(deserializer);
        var var_subcaption = sse_decode_String(deserializer);
        var var_class_ = sse_decode_ns_dictionary_class(deserializer);
        return DartBalloonLayout_TemplateLayout(
            imageSubtitle: var_imageSubtitle,
            imageTitle: var_imageTitle,
            caption: var_caption,
            secondarySubcaption: var_secondarySubcaption,
            tertiarySubcaption: var_tertiarySubcaption,
            subcaption: var_subcaption,
            class_: var_class_);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  DartChangeParticipantMessage sse_decode_dart_change_participant_message(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_newParticipants = sse_decode_list_String(deserializer);
    var var_groupVersion = sse_decode_CastedPrimitive_u_64(deserializer);
    return DartChangeParticipantMessage(
        newParticipants: var_newParticipants, groupVersion: var_groupVersion);
  }

  @protected
  DartConversationData sse_decode_dart_conversation_data(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_participants = sse_decode_list_String(deserializer);
    var var_cvName = sse_decode_opt_String(deserializer);
    var var_senderGuid = sse_decode_opt_String(deserializer);
    var var_afterGuid = sse_decode_opt_String(deserializer);
    return DartConversationData(
        participants: var_participants,
        cvName: var_cvName,
        senderGuid: var_senderGuid,
        afterGuid: var_afterGuid);
  }

  @protected
  DartDeviceInfo sse_decode_dart_device_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_serial = sse_decode_String(deserializer);
    var var_osVersion = sse_decode_String(deserializer);
    var var_encodedData = sse_decode_opt_list_prim_u_8_strict(deserializer);
    return DartDeviceInfo(
        name: var_name,
        serial: var_serial,
        osVersion: var_osVersion,
        encodedData: var_encodedData);
  }

  @protected
  DartEditMessage sse_decode_dart_edit_message(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_tuuid = sse_decode_String(deserializer);
    var var_editPart = sse_decode_CastedPrimitive_u_64(deserializer);
    var var_newParts = sse_decode_dart_message_parts(deserializer);
    return DartEditMessage(
        tuuid: var_tuuid, editPart: var_editPart, newParts: var_newParts);
  }

  @protected
  DartExtensionApp sse_decode_dart_extension_app(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_appId = sse_decode_CastedPrimitive_u_64(deserializer);
    var var_bundleId = sse_decode_String(deserializer);
    var var_balloon = sse_decode_opt_box_autoadd_dart_balloon(deserializer);
    return DartExtensionApp(
        name: var_name,
        appId: var_appId,
        bundleId: var_bundleId,
        balloon: var_balloon);
  }

  @protected
  DartHwExtra sse_decode_dart_hw_extra(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_version = sse_decode_String(deserializer);
    var var_protocolVersion = sse_decode_u_32(deserializer);
    var var_deviceId = sse_decode_String(deserializer);
    var var_icloudUa = sse_decode_String(deserializer);
    var var_aoskitVersion = sse_decode_String(deserializer);
    return DartHwExtra(
        version: var_version,
        protocolVersion: var_protocolVersion,
        deviceId: var_deviceId,
        icloudUa: var_icloudUa,
        aoskitVersion: var_aoskitVersion);
  }

  @protected
  DartIMessage sse_decode_dart_i_message(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_sender = sse_decode_opt_String(deserializer);
    var var_conversation =
        sse_decode_opt_box_autoadd_dart_conversation_data(deserializer);
    var var_message = sse_decode_dart_message(deserializer);
    var var_sentTimestamp = sse_decode_CastedPrimitive_u_64(deserializer);
    var var_target = sse_decode_opt_list_dart_message_target(deserializer);
    var var_sendDelivered = sse_decode_bool(deserializer);
    return DartIMessage(
        id: var_id,
        sender: var_sender,
        conversation: var_conversation,
        message: var_message,
        sentTimestamp: var_sentTimestamp,
        target: var_target,
        sendDelivered: var_sendDelivered);
  }

  @protected
  DartIconChangeMessage sse_decode_dart_icon_change_message(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_file = sse_decode_opt_box_autoadd_dart_mmcs_file(deserializer);
    var var_groupVersion = sse_decode_CastedPrimitive_u_64(deserializer);
    return DartIconChangeMessage(
        file: var_file, groupVersion: var_groupVersion);
  }

  @protected
  DartIndexedMessagePart sse_decode_dart_indexed_message_part(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_part_ = sse_decode_dart_message_part(deserializer);
    var var_idx = sse_decode_opt_CastedPrimitive_usize(deserializer);
    var var_ext = sse_decode_opt_box_autoadd_dart_part_extension(deserializer);
    return DartIndexedMessagePart(part_: var_part_, idx: var_idx, ext: var_ext);
  }

  @protected
  DartLoginState sse_decode_dart_login_state(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return DartLoginState_LoggedIn();
      case 1:
        return DartLoginState_NeedsDevice2FA();
      case 2:
        return DartLoginState_Needs2FAVerification();
      case 3:
        return DartLoginState_NeedsSMS2FA();
      case 4:
        var var_field0 =
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyBody(
                deserializer);
        return DartLoginState_NeedsSMS2FAVerification(var_field0);
      case 5:
        var var_field0 = sse_decode_String(deserializer);
        return DartLoginState_NeedsExtraStep(var_field0);
      case 6:
        return DartLoginState_NeedsLogin();
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  DartMessage sse_decode_dart_message(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 =
            sse_decode_box_autoadd_dart_normal_message(deserializer);
        return DartMessage_Message(var_field0);
      case 1:
        var var_field0 =
            sse_decode_box_autoadd_dart_rename_message(deserializer);
        return DartMessage_RenameMessage(var_field0);
      case 2:
        var var_field0 = sse_decode_box_autoadd_dart_change_participant_message(
            deserializer);
        return DartMessage_ChangeParticipants(var_field0);
      case 3:
        var var_field0 =
            sse_decode_box_autoadd_dart_react_message(deserializer);
        return DartMessage_React(var_field0);
      case 4:
        return DartMessage_Delivered();
      case 5:
        return DartMessage_Read();
      case 6:
        return DartMessage_Typing();
      case 7:
        var var_field0 =
            sse_decode_box_autoadd_dart_unsend_message(deserializer);
        return DartMessage_Unsend(var_field0);
      case 8:
        var var_field0 = sse_decode_box_autoadd_dart_edit_message(deserializer);
        return DartMessage_Edit(var_field0);
      case 9:
        var var_field0 =
            sse_decode_box_autoadd_dart_icon_change_message(deserializer);
        return DartMessage_IconChange(var_field0);
      case 10:
        return DartMessage_StopTyping();
      case 11:
        var var_field0 = sse_decode_bool(deserializer);
        return DartMessage_EnableSmsActivation(var_field0);
      case 12:
        return DartMessage_MessageReadOnDevice();
      case 13:
        var var_field0 = sse_decode_bool(deserializer);
        return DartMessage_SmsConfirmSent(var_field0);
      case 14:
        return DartMessage_MarkUnread();
      case 15:
        return DartMessage_PeerCacheInvalidate();
      case 16:
        var var_field0 =
            sse_decode_box_autoadd_dart_update_extension_message(deserializer);
        return DartMessage_UpdateExtension(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  DartMessagePart sse_decode_dart_message_part(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return DartMessagePart_Text(var_field0);
      case 1:
        var var_field0 = sse_decode_box_autoadd_dart_attachment(deserializer);
        return DartMessagePart_Attachment(var_field0);
      case 2:
        var var_field0 = sse_decode_String(deserializer);
        var var_field1 = sse_decode_String(deserializer);
        return DartMessagePart_Mention(var_field0, var_field1);
      case 3:
        var var_field0 = sse_decode_String(deserializer);
        return DartMessagePart_Object(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  DartMessageParts sse_decode_dart_message_parts(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_list_dart_indexed_message_part(deserializer);
    return DartMessageParts(field0: var_field0);
  }

  @protected
  DartMessageTarget sse_decode_dart_message_target(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_list_prim_u_8_strict(deserializer);
        return DartMessageTarget_Token(var_field0);
      case 1:
        var var_field0 = sse_decode_String(deserializer);
        return DartMessageTarget_Uuid(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  DartMessageType sse_decode_dart_message_type(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return DartMessageType_IMessage();
      case 1:
        var var_isPhone = sse_decode_bool(deserializer);
        var var_usingNumber = sse_decode_String(deserializer);
        var var_fromHandle = sse_decode_opt_String(deserializer);
        return DartMessageType_SMS(
            isPhone: var_isPhone,
            usingNumber: var_usingNumber,
            fromHandle: var_fromHandle);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  DartMMCSFile sse_decode_dart_mmcs_file(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_signature = sse_decode_list_prim_u_8_strict(deserializer);
    var var_object = sse_decode_String(deserializer);
    var var_url = sse_decode_String(deserializer);
    var var_key = sse_decode_list_prim_u_8_strict(deserializer);
    var var_size = sse_decode_CastedPrimitive_usize(deserializer);
    return DartMMCSFile(
        signature: var_signature,
        object: var_object,
        url: var_url,
        key: var_key,
        size: var_size);
  }

  @protected
  DartNormalMessage sse_decode_dart_normal_message(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_parts = sse_decode_dart_message_parts(deserializer);
    var var_effect = sse_decode_opt_String(deserializer);
    var var_replyGuid = sse_decode_opt_String(deserializer);
    var var_replyPart = sse_decode_opt_String(deserializer);
    var var_service = sse_decode_dart_message_type(deserializer);
    var var_subject = sse_decode_opt_String(deserializer);
    var var_app = sse_decode_opt_box_autoadd_dart_extension_app(deserializer);
    return DartNormalMessage(
        parts: var_parts,
        effect: var_effect,
        replyGuid: var_replyGuid,
        replyPart: var_replyPart,
        service: var_service,
        subject: var_subject,
        app: var_app);
  }

  @protected
  DartPartExtension sse_decode_dart_part_extension(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_msgWidth = sse_decode_f_64(deserializer);
        var var_rotation = sse_decode_f_64(deserializer);
        var var_sai = sse_decode_u_64(deserializer);
        var var_scale = sse_decode_f_64(deserializer);
        var var_update = sse_decode_opt_box_autoadd_bool(deserializer);
        var var_sli = sse_decode_u_64(deserializer);
        var var_normalizedX = sse_decode_f_64(deserializer);
        var var_normalizedY = sse_decode_f_64(deserializer);
        var var_version = sse_decode_u_64(deserializer);
        var var_hash = sse_decode_String(deserializer);
        var var_safi = sse_decode_u_64(deserializer);
        var var_effectType = sse_decode_i_64(deserializer);
        var var_stickerId = sse_decode_String(deserializer);
        return DartPartExtension_Sticker(
            msgWidth: var_msgWidth,
            rotation: var_rotation,
            sai: var_sai,
            scale: var_scale,
            update: var_update,
            sli: var_sli,
            normalizedX: var_normalizedX,
            normalizedY: var_normalizedY,
            version: var_version,
            hash: var_hash,
            safi: var_safi,
            effectType: var_effectType,
            stickerId: var_stickerId);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  DartPrivateDeviceInfo sse_decode_dart_private_device_info(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_uuid = sse_decode_opt_String(deserializer);
    var var_deviceName = sse_decode_opt_String(deserializer);
    var var_token = sse_decode_list_prim_u_8_strict(deserializer);
    var var_isHsaTrusted = sse_decode_bool(deserializer);
    var var_identites = sse_decode_list_String(deserializer);
    var var_subServices = sse_decode_list_String(deserializer);
    return DartPrivateDeviceInfo(
        uuid: var_uuid,
        deviceName: var_deviceName,
        token: var_token,
        isHsaTrusted: var_isHsaTrusted,
        identites: var_identites,
        subServices: var_subServices);
  }

  @protected
  DartReactMessage sse_decode_dart_react_message(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_toUuid = sse_decode_String(deserializer);
    var var_toPart = sse_decode_opt_CastedPrimitive_u_64(deserializer);
    var var_reaction = sse_decode_dart_react_message_type(deserializer);
    var var_toText = sse_decode_String(deserializer);
    return DartReactMessage(
        toUuid: var_toUuid,
        toPart: var_toPart,
        reaction: var_reaction,
        toText: var_toText);
  }

  @protected
  DartReactMessageType sse_decode_dart_react_message_type(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_reaction = sse_decode_dart_reaction(deserializer);
        var var_enable = sse_decode_bool(deserializer);
        return DartReactMessageType_React(
            reaction: var_reaction, enable: var_enable);
      case 1:
        var var_spec = sse_decode_box_autoadd_dart_extension_app(deserializer);
        var var_body = sse_decode_box_autoadd_dart_message_parts(deserializer);
        return DartReactMessageType_Extension(spec: var_spec, body: var_body);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  DartReaction sse_decode_dart_reaction(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return DartReaction.values[inner];
  }

  @protected
  DartRegisterState sse_decode_dart_register_state(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return DartRegisterState_Registered();
      case 1:
        return DartRegisterState_Registering();
      case 2:
        var var_retryWait = sse_decode_opt_box_autoadd_u_64(deserializer);
        var var_error = sse_decode_String(deserializer);
        return DartRegisterState_Failed(
            retryWait: var_retryWait, error: var_error);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  DartRenameMessage sse_decode_dart_rename_message(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_newName = sse_decode_String(deserializer);
    return DartRenameMessage(newName: var_newName);
  }

  @protected
  DartSupportAction sse_decode_dart_support_action(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_url = sse_decode_String(deserializer);
    var var_button = sse_decode_String(deserializer);
    return DartSupportAction(url: var_url, button: var_button);
  }

  @protected
  DartSupportAlert sse_decode_dart_support_alert(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_title = sse_decode_String(deserializer);
    var var_body = sse_decode_String(deserializer);
    var var_action =
        sse_decode_opt_box_autoadd_dart_support_action(deserializer);
    return DartSupportAlert(
        title: var_title, body: var_body, action: var_action);
  }

  @protected
  DartTrustedPhoneNumber sse_decode_dart_trusted_phone_number(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_numberWithDialCode = sse_decode_String(deserializer);
    var var_lastTwoDigits = sse_decode_String(deserializer);
    var var_pushMode = sse_decode_String(deserializer);
    var var_id = sse_decode_u_32(deserializer);
    return DartTrustedPhoneNumber(
        numberWithDialCode: var_numberWithDialCode,
        lastTwoDigits: var_lastTwoDigits,
        pushMode: var_pushMode,
        id: var_id);
  }

  @protected
  DartUnsendMessage sse_decode_dart_unsend_message(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_tuuid = sse_decode_String(deserializer);
    var var_editPart = sse_decode_CastedPrimitive_u_64(deserializer);
    return DartUnsendMessage(tuuid: var_tuuid, editPart: var_editPart);
  }

  @protected
  DartUpdateExtensionMessage sse_decode_dart_update_extension_message(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_forUuid = sse_decode_String(deserializer);
    var var_ext = sse_decode_dart_part_extension(deserializer);
    return DartUpdateExtensionMessage(forUuid: var_forUuid, ext: var_ext);
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  List<IdsUser>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <IdsUser>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<DartIndexedMessagePart> sse_decode_list_dart_indexed_message_part(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <DartIndexedMessagePart>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_dart_indexed_message_part(deserializer));
    }
    return ans_;
  }

  @protected
  List<DartMessageTarget> sse_decode_list_dart_message_target(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <DartMessageTarget>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_dart_message_target(deserializer));
    }
    return ans_;
  }

  @protected
  List<DartPrivateDeviceInfo> sse_decode_list_dart_private_device_info(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <DartPrivateDeviceInfo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_dart_private_device_info(deserializer));
    }
    return ans_;
  }

  @protected
  List<DartTrustedPhoneNumber> sse_decode_list_dart_trusted_phone_number(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <DartTrustedPhoneNumber>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_dart_trusted_phone_number(deserializer));
    }
    return ans_;
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  MMCSTransferProgress sse_decode_mmcs_transfer_progress(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_prog = sse_decode_CastedPrimitive_usize(deserializer);
    var var_total = sse_decode_CastedPrimitive_usize(deserializer);
    var var_file = sse_decode_opt_box_autoadd_dart_mmcs_file(deserializer);
    return MMCSTransferProgress(
        prog: var_prog, total: var_total, file: var_file);
  }

  @protected
  MyAsyncRuntime sse_decode_my_async_runtime(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MyAsyncRuntime();
  }

  @protected
  NSDictionaryClass sse_decode_ns_dictionary_class(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return NSDictionaryClass.values[inner];
  }

  @protected
  int? sse_decode_opt_CastedPrimitive_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_CastedPrimitive_u_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_CastedPrimitive_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_CastedPrimitive_usize(deserializer));
    } else {
      return null;
    }
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  IdsUser?
      sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  JoinedOsConfig?
      sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  bool? sse_decode_opt_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_bool(deserializer));
    } else {
      return null;
    }
  }

  @protected
  DartAttachment? sse_decode_opt_box_autoadd_dart_attachment(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_dart_attachment(deserializer));
    } else {
      return null;
    }
  }

  @protected
  DartBalloon? sse_decode_opt_box_autoadd_dart_balloon(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_dart_balloon(deserializer));
    } else {
      return null;
    }
  }

  @protected
  DartConversationData? sse_decode_opt_box_autoadd_dart_conversation_data(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_dart_conversation_data(deserializer));
    } else {
      return null;
    }
  }

  @protected
  DartExtensionApp? sse_decode_opt_box_autoadd_dart_extension_app(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_dart_extension_app(deserializer));
    } else {
      return null;
    }
  }

  @protected
  DartIMessage? sse_decode_opt_box_autoadd_dart_i_message(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_dart_i_message(deserializer));
    } else {
      return null;
    }
  }

  @protected
  DartLoginState? sse_decode_opt_box_autoadd_dart_login_state(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_dart_login_state(deserializer));
    } else {
      return null;
    }
  }

  @protected
  DartMMCSFile? sse_decode_opt_box_autoadd_dart_mmcs_file(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_dart_mmcs_file(deserializer));
    } else {
      return null;
    }
  }

  @protected
  DartPartExtension? sse_decode_opt_box_autoadd_dart_part_extension(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_dart_part_extension(deserializer));
    } else {
      return null;
    }
  }

  @protected
  DartSupportAction? sse_decode_opt_box_autoadd_dart_support_action(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_dart_support_action(deserializer));
    } else {
      return null;
    }
  }

  @protected
  DartSupportAlert? sse_decode_opt_box_autoadd_dart_support_alert(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_dart_support_alert(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BigInt? sse_decode_opt_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<DartMessageTarget>? sse_decode_opt_list_dart_message_target(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_dart_message_target(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Uint8List? sse_decode_opt_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_prim_u_8_strict(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PollResult sse_decode_poll_result(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return PollResult_Stop();
      case 1:
        var var_field0 =
            sse_decode_opt_box_autoadd_dart_i_message(deserializer);
        return PollResult_Cont(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  (
    DartLoginState,
    IdsUser?
  ) sse_decode_record_dart_login_state_opt_box_autoadd_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_ids_user(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_dart_login_state(deserializer);
    var var_field1 =
        sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
            deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (
    List<DartTrustedPhoneNumber>,
    DartLoginState?
  ) sse_decode_record_list_dart_trusted_phone_number_opt_box_autoadd_dart_login_state(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_list_dart_trusted_phone_number(deserializer);
    var var_field1 = sse_decode_opt_box_autoadd_dart_login_state(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  RegistrationPhase sse_decode_registration_phase(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return RegistrationPhase.values[inner];
  }

  @protected
  TransferProgress sse_decode_transfer_progress(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_prog = sse_decode_CastedPrimitive_usize(deserializer);
    var var_total = sse_decode_CastedPrimitive_usize(deserializer);
    var var_attachment =
        sse_decode_opt_box_autoadd_dart_attachment(deserializer);
    return TransferProgress(
        prog: var_prog, total: var_total, attachment: var_attachment);
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
          ArcPushState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ArcPushStateImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
          IdsUser self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as IdsUserImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig(
          JoinedOsConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as JoinedOsConfigImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyBody(
          VerifyBody self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as VerifyBodyImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
          ArcPushState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ArcPushStateImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
          IdsUser self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as IdsUserImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig(
          JoinedOsConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as JoinedOsConfigImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyBody(
          VerifyBody self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as VerifyBodyImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void sse_encode_CastedPrimitive_u_64(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(sseEncodeCastedPrimitiveU64(self), serializer);
  }

  @protected
  void sse_encode_CastedPrimitive_usize(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(sseEncodeCastedPrimitiveU64(self), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcPushState(
          ArcPushState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ArcPushStateImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
          IdsUser self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as IdsUserImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig(
          JoinedOsConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as JoinedOsConfigImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyBody(
          VerifyBody self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as VerifyBodyImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_StreamSink_mmcs_transfer_progress_Sse(
      RustStreamSink<MMCSTransferProgress> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_mmcs_transfer_progress,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_transfer_progress_Sse(
      RustStreamSink<TransferProgress> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_transfer_progress,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
          IdsUser self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
        self, serializer);
  }

  @protected
  void
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig(
          JoinedOsConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig(
        self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_dart_attachment(
      DartAttachment self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_dart_attachment(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_dart_balloon(
      DartBalloon self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_dart_balloon(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_dart_change_participant_message(
      DartChangeParticipantMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_dart_change_participant_message(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_dart_conversation_data(
      DartConversationData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_dart_conversation_data(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_dart_edit_message(
      DartEditMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_dart_edit_message(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_dart_extension_app(
      DartExtensionApp self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_dart_extension_app(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_dart_hw_extra(
      DartHwExtra self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_dart_hw_extra(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_dart_i_message(
      DartIMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_dart_i_message(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_dart_icon_change_message(
      DartIconChangeMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_dart_icon_change_message(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_dart_login_state(
      DartLoginState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_dart_login_state(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_dart_message(
      DartMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_dart_message(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_dart_message_parts(
      DartMessageParts self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_dart_message_parts(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_dart_mmcs_file(
      DartMMCSFile self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_dart_mmcs_file(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_dart_normal_message(
      DartNormalMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_dart_normal_message(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_dart_part_extension(
      DartPartExtension self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_dart_part_extension(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_dart_react_message(
      DartReactMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_dart_react_message(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_dart_rename_message(
      DartRenameMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_dart_rename_message(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_dart_support_action(
      DartSupportAction self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_dart_support_action(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_dart_support_alert(
      DartSupportAlert self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_dart_support_alert(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_dart_unsend_message(
      DartUnsendMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_dart_unsend_message(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_dart_update_extension_message(
      DartUpdateExtensionMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_dart_update_extension_message(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self, serializer);
  }

  @protected
  void sse_encode_dart_attachment(
      DartAttachment self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_dart_attachment_type(self.aType, serializer);
    sse_encode_CastedPrimitive_u_64(self.partIdx, serializer);
    sse_encode_String(self.utiType, serializer);
    sse_encode_String(self.mime, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_bool(self.iris, serializer);
  }

  @protected
  void sse_encode_dart_attachment_type(
      DartAttachmentType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case DartAttachmentType_Inline(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_list_prim_u_8_strict(field0, serializer);
      case DartAttachmentType_MMCS(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_dart_mmcs_file(field0, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_dart_balloon(DartBalloon self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.url, serializer);
    sse_encode_opt_String(self.session, serializer);
    sse_encode_dart_balloon_layout(self.layout, serializer);
    sse_encode_opt_String(self.ldText, serializer);
    sse_encode_bool(self.isLive, serializer);
    sse_encode_list_prim_u_8_strict(self.icon, serializer);
  }

  @protected
  void sse_encode_dart_balloon_layout(
      DartBalloonLayout self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case DartBalloonLayout_TemplateLayout(
          imageSubtitle: final imageSubtitle,
          imageTitle: final imageTitle,
          caption: final caption,
          secondarySubcaption: final secondarySubcaption,
          tertiarySubcaption: final tertiarySubcaption,
          subcaption: final subcaption,
          class_: final class_
        ):
        sse_encode_i_32(0, serializer);
        sse_encode_String(imageSubtitle, serializer);
        sse_encode_String(imageTitle, serializer);
        sse_encode_String(caption, serializer);
        sse_encode_String(secondarySubcaption, serializer);
        sse_encode_String(tertiarySubcaption, serializer);
        sse_encode_String(subcaption, serializer);
        sse_encode_ns_dictionary_class(class_, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_dart_change_participant_message(
      DartChangeParticipantMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_String(self.newParticipants, serializer);
    sse_encode_CastedPrimitive_u_64(self.groupVersion, serializer);
  }

  @protected
  void sse_encode_dart_conversation_data(
      DartConversationData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_String(self.participants, serializer);
    sse_encode_opt_String(self.cvName, serializer);
    sse_encode_opt_String(self.senderGuid, serializer);
    sse_encode_opt_String(self.afterGuid, serializer);
  }

  @protected
  void sse_encode_dart_device_info(
      DartDeviceInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.serial, serializer);
    sse_encode_String(self.osVersion, serializer);
    sse_encode_opt_list_prim_u_8_strict(self.encodedData, serializer);
  }

  @protected
  void sse_encode_dart_edit_message(
      DartEditMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.tuuid, serializer);
    sse_encode_CastedPrimitive_u_64(self.editPart, serializer);
    sse_encode_dart_message_parts(self.newParts, serializer);
  }

  @protected
  void sse_encode_dart_extension_app(
      DartExtensionApp self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_CastedPrimitive_u_64(self.appId, serializer);
    sse_encode_String(self.bundleId, serializer);
    sse_encode_opt_box_autoadd_dart_balloon(self.balloon, serializer);
  }

  @protected
  void sse_encode_dart_hw_extra(DartHwExtra self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.version, serializer);
    sse_encode_u_32(self.protocolVersion, serializer);
    sse_encode_String(self.deviceId, serializer);
    sse_encode_String(self.icloudUa, serializer);
    sse_encode_String(self.aoskitVersion, serializer);
  }

  @protected
  void sse_encode_dart_i_message(DartIMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_opt_String(self.sender, serializer);
    sse_encode_opt_box_autoadd_dart_conversation_data(
        self.conversation, serializer);
    sse_encode_dart_message(self.message, serializer);
    sse_encode_CastedPrimitive_u_64(self.sentTimestamp, serializer);
    sse_encode_opt_list_dart_message_target(self.target, serializer);
    sse_encode_bool(self.sendDelivered, serializer);
  }

  @protected
  void sse_encode_dart_icon_change_message(
      DartIconChangeMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_dart_mmcs_file(self.file, serializer);
    sse_encode_CastedPrimitive_u_64(self.groupVersion, serializer);
  }

  @protected
  void sse_encode_dart_indexed_message_part(
      DartIndexedMessagePart self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_dart_message_part(self.part_, serializer);
    sse_encode_opt_CastedPrimitive_usize(self.idx, serializer);
    sse_encode_opt_box_autoadd_dart_part_extension(self.ext, serializer);
  }

  @protected
  void sse_encode_dart_login_state(
      DartLoginState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case DartLoginState_LoggedIn():
        sse_encode_i_32(0, serializer);
      case DartLoginState_NeedsDevice2FA():
        sse_encode_i_32(1, serializer);
      case DartLoginState_Needs2FAVerification():
        sse_encode_i_32(2, serializer);
      case DartLoginState_NeedsSMS2FA():
        sse_encode_i_32(3, serializer);
      case DartLoginState_NeedsSMS2FAVerification(field0: final field0):
        sse_encode_i_32(4, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyBody(
            field0, serializer);
      case DartLoginState_NeedsExtraStep(field0: final field0):
        sse_encode_i_32(5, serializer);
        sse_encode_String(field0, serializer);
      case DartLoginState_NeedsLogin():
        sse_encode_i_32(6, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_dart_message(DartMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case DartMessage_Message(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_dart_normal_message(field0, serializer);
      case DartMessage_RenameMessage(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_dart_rename_message(field0, serializer);
      case DartMessage_ChangeParticipants(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_box_autoadd_dart_change_participant_message(
            field0, serializer);
      case DartMessage_React(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_box_autoadd_dart_react_message(field0, serializer);
      case DartMessage_Delivered():
        sse_encode_i_32(4, serializer);
      case DartMessage_Read():
        sse_encode_i_32(5, serializer);
      case DartMessage_Typing():
        sse_encode_i_32(6, serializer);
      case DartMessage_Unsend(field0: final field0):
        sse_encode_i_32(7, serializer);
        sse_encode_box_autoadd_dart_unsend_message(field0, serializer);
      case DartMessage_Edit(field0: final field0):
        sse_encode_i_32(8, serializer);
        sse_encode_box_autoadd_dart_edit_message(field0, serializer);
      case DartMessage_IconChange(field0: final field0):
        sse_encode_i_32(9, serializer);
        sse_encode_box_autoadd_dart_icon_change_message(field0, serializer);
      case DartMessage_StopTyping():
        sse_encode_i_32(10, serializer);
      case DartMessage_EnableSmsActivation(field0: final field0):
        sse_encode_i_32(11, serializer);
        sse_encode_bool(field0, serializer);
      case DartMessage_MessageReadOnDevice():
        sse_encode_i_32(12, serializer);
      case DartMessage_SmsConfirmSent(field0: final field0):
        sse_encode_i_32(13, serializer);
        sse_encode_bool(field0, serializer);
      case DartMessage_MarkUnread():
        sse_encode_i_32(14, serializer);
      case DartMessage_PeerCacheInvalidate():
        sse_encode_i_32(15, serializer);
      case DartMessage_UpdateExtension(field0: final field0):
        sse_encode_i_32(16, serializer);
        sse_encode_box_autoadd_dart_update_extension_message(
            field0, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_dart_message_part(
      DartMessagePart self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case DartMessagePart_Text(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case DartMessagePart_Attachment(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_dart_attachment(field0, serializer);
      case DartMessagePart_Mention(field0: final field0, field1: final field1):
        sse_encode_i_32(2, serializer);
        sse_encode_String(field0, serializer);
        sse_encode_String(field1, serializer);
      case DartMessagePart_Object(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_String(field0, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_dart_message_parts(
      DartMessageParts self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_dart_indexed_message_part(self.field0, serializer);
  }

  @protected
  void sse_encode_dart_message_target(
      DartMessageTarget self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case DartMessageTarget_Token(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_list_prim_u_8_strict(field0, serializer);
      case DartMessageTarget_Uuid(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_String(field0, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_dart_message_type(
      DartMessageType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case DartMessageType_IMessage():
        sse_encode_i_32(0, serializer);
      case DartMessageType_SMS(
          isPhone: final isPhone,
          usingNumber: final usingNumber,
          fromHandle: final fromHandle
        ):
        sse_encode_i_32(1, serializer);
        sse_encode_bool(isPhone, serializer);
        sse_encode_String(usingNumber, serializer);
        sse_encode_opt_String(fromHandle, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_dart_mmcs_file(DartMMCSFile self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.signature, serializer);
    sse_encode_String(self.object, serializer);
    sse_encode_String(self.url, serializer);
    sse_encode_list_prim_u_8_strict(self.key, serializer);
    sse_encode_CastedPrimitive_usize(self.size, serializer);
  }

  @protected
  void sse_encode_dart_normal_message(
      DartNormalMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_dart_message_parts(self.parts, serializer);
    sse_encode_opt_String(self.effect, serializer);
    sse_encode_opt_String(self.replyGuid, serializer);
    sse_encode_opt_String(self.replyPart, serializer);
    sse_encode_dart_message_type(self.service, serializer);
    sse_encode_opt_String(self.subject, serializer);
    sse_encode_opt_box_autoadd_dart_extension_app(self.app, serializer);
  }

  @protected
  void sse_encode_dart_part_extension(
      DartPartExtension self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case DartPartExtension_Sticker(
          msgWidth: final msgWidth,
          rotation: final rotation,
          sai: final sai,
          scale: final scale,
          update: final update,
          sli: final sli,
          normalizedX: final normalizedX,
          normalizedY: final normalizedY,
          version: final version,
          hash: final hash,
          safi: final safi,
          effectType: final effectType,
          stickerId: final stickerId
        ):
        sse_encode_i_32(0, serializer);
        sse_encode_f_64(msgWidth, serializer);
        sse_encode_f_64(rotation, serializer);
        sse_encode_u_64(sai, serializer);
        sse_encode_f_64(scale, serializer);
        sse_encode_opt_box_autoadd_bool(update, serializer);
        sse_encode_u_64(sli, serializer);
        sse_encode_f_64(normalizedX, serializer);
        sse_encode_f_64(normalizedY, serializer);
        sse_encode_u_64(version, serializer);
        sse_encode_String(hash, serializer);
        sse_encode_u_64(safi, serializer);
        sse_encode_i_64(effectType, serializer);
        sse_encode_String(stickerId, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_dart_private_device_info(
      DartPrivateDeviceInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.uuid, serializer);
    sse_encode_opt_String(self.deviceName, serializer);
    sse_encode_list_prim_u_8_strict(self.token, serializer);
    sse_encode_bool(self.isHsaTrusted, serializer);
    sse_encode_list_String(self.identites, serializer);
    sse_encode_list_String(self.subServices, serializer);
  }

  @protected
  void sse_encode_dart_react_message(
      DartReactMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.toUuid, serializer);
    sse_encode_opt_CastedPrimitive_u_64(self.toPart, serializer);
    sse_encode_dart_react_message_type(self.reaction, serializer);
    sse_encode_String(self.toText, serializer);
  }

  @protected
  void sse_encode_dart_react_message_type(
      DartReactMessageType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case DartReactMessageType_React(
          reaction: final reaction,
          enable: final enable
        ):
        sse_encode_i_32(0, serializer);
        sse_encode_dart_reaction(reaction, serializer);
        sse_encode_bool(enable, serializer);
      case DartReactMessageType_Extension(spec: final spec, body: final body):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_dart_extension_app(spec, serializer);
        sse_encode_box_autoadd_dart_message_parts(body, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_dart_reaction(DartReaction self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_dart_register_state(
      DartRegisterState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case DartRegisterState_Registered():
        sse_encode_i_32(0, serializer);
      case DartRegisterState_Registering():
        sse_encode_i_32(1, serializer);
      case DartRegisterState_Failed(
          retryWait: final retryWait,
          error: final error
        ):
        sse_encode_i_32(2, serializer);
        sse_encode_opt_box_autoadd_u_64(retryWait, serializer);
        sse_encode_String(error, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_dart_rename_message(
      DartRenameMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.newName, serializer);
  }

  @protected
  void sse_encode_dart_support_action(
      DartSupportAction self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.url, serializer);
    sse_encode_String(self.button, serializer);
  }

  @protected
  void sse_encode_dart_support_alert(
      DartSupportAlert self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.title, serializer);
    sse_encode_String(self.body, serializer);
    sse_encode_opt_box_autoadd_dart_support_action(self.action, serializer);
  }

  @protected
  void sse_encode_dart_trusted_phone_number(
      DartTrustedPhoneNumber self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.numberWithDialCode, serializer);
    sse_encode_String(self.lastTwoDigits, serializer);
    sse_encode_String(self.pushMode, serializer);
    sse_encode_u_32(self.id, serializer);
  }

  @protected
  void sse_encode_dart_unsend_message(
      DartUnsendMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.tuuid, serializer);
    sse_encode_CastedPrimitive_u_64(self.editPart, serializer);
  }

  @protected
  void sse_encode_dart_update_extension_message(
      DartUpdateExtensionMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.forUuid, serializer);
    sse_encode_dart_part_extension(self.ext, serializer);
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
          List<IdsUser> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
          item, serializer);
    }
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_dart_indexed_message_part(
      List<DartIndexedMessagePart> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_dart_indexed_message_part(item, serializer);
    }
  }

  @protected
  void sse_encode_list_dart_message_target(
      List<DartMessageTarget> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_dart_message_target(item, serializer);
    }
  }

  @protected
  void sse_encode_list_dart_private_device_info(
      List<DartPrivateDeviceInfo> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_dart_private_device_info(item, serializer);
    }
  }

  @protected
  void sse_encode_list_dart_trusted_phone_number(
      List<DartTrustedPhoneNumber> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_dart_trusted_phone_number(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint8List(self is Uint8List ? self : Uint8List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_mmcs_transfer_progress(
      MMCSTransferProgress self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_CastedPrimitive_usize(self.prog, serializer);
    sse_encode_CastedPrimitive_usize(self.total, serializer);
    sse_encode_opt_box_autoadd_dart_mmcs_file(self.file, serializer);
  }

  @protected
  void sse_encode_my_async_runtime(
      MyAsyncRuntime self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_ns_dictionary_class(
      NSDictionaryClass self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_opt_CastedPrimitive_u_64(
      int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_CastedPrimitive_u_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_CastedPrimitive_usize(
      int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_CastedPrimitive_usize(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void
      sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
          IdsUser? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
          self, serializer);
    }
  }

  @protected
  void
      sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig(
          JoinedOsConfig? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinedOSConfig(
          self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_bool(bool? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_bool(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_dart_attachment(
      DartAttachment? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_dart_attachment(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_dart_balloon(
      DartBalloon? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_dart_balloon(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_dart_conversation_data(
      DartConversationData? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_dart_conversation_data(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_dart_extension_app(
      DartExtensionApp? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_dart_extension_app(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_dart_i_message(
      DartIMessage? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_dart_i_message(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_dart_login_state(
      DartLoginState? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_dart_login_state(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_dart_mmcs_file(
      DartMMCSFile? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_dart_mmcs_file(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_dart_part_extension(
      DartPartExtension? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_dart_part_extension(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_dart_support_action(
      DartSupportAction? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_dart_support_action(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_dart_support_alert(
      DartSupportAlert? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_dart_support_alert(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_64(BigInt? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_dart_message_target(
      List<DartMessageTarget>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_dart_message_target(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_prim_u_8_strict(
      Uint8List? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_prim_u_8_strict(self, serializer);
    }
  }

  @protected
  void sse_encode_poll_result(PollResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case PollResult_Stop():
        sse_encode_i_32(0, serializer);
      case PollResult_Cont(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_opt_box_autoadd_dart_i_message(field0, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void
      sse_encode_record_dart_login_state_opt_box_autoadd_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_ids_user(
          (DartLoginState, IdsUser?) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_dart_login_state(self.$1, serializer);
    sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIDSUser(
        self.$2, serializer);
  }

  @protected
  void
      sse_encode_record_list_dart_trusted_phone_number_opt_box_autoadd_dart_login_state(
          (List<DartTrustedPhoneNumber>, DartLoginState?) self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_dart_trusted_phone_number(self.$1, serializer);
    sse_encode_opt_box_autoadd_dart_login_state(self.$2, serializer);
  }

  @protected
  void sse_encode_registration_phase(
      RegistrationPhase self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_transfer_progress(
      TransferProgress self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_CastedPrimitive_usize(self.prog, serializer);
    sse_encode_CastedPrimitive_usize(self.total, serializer);
    sse_encode_opt_box_autoadd_dart_attachment(self.attachment, serializer);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

@sealed
class ArcPushStateImpl extends RustOpaque implements ArcPushState {
  // Not to be used by end users
  ArcPushStateImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ArcPushStateImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ArcPushState,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ArcPushState,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ArcPushStatePtr,
  );
}

@sealed
class IdsUserImpl extends RustOpaque implements IdsUser {
  // Not to be used by end users
  IdsUserImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  IdsUserImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_IdsUser,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_IdsUser,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_IdsUserPtr,
  );
}

@sealed
class JoinedOsConfigImpl extends RustOpaque implements JoinedOsConfig {
  // Not to be used by end users
  JoinedOsConfigImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  JoinedOsConfigImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_JoinedOsConfig,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_JoinedOsConfig,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_JoinedOsConfigPtr,
  );
}

@sealed
class VerifyBodyImpl extends RustOpaque implements VerifyBody {
  // Not to be used by end users
  VerifyBodyImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  VerifyBodyImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_VerifyBody,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_VerifyBody,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_VerifyBodyPtr,
  );
}
